{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"kobs - Kubernetes Observability Platform","title":"Introduction"},{"location":"#kobs-kubernetes-observability-platform","text":"","title":"kobs - Kubernetes Observability Platform"},{"location":"configuration/authentication/","text":"Authentication kobs hasn't any built in authentication mechanism. We recommend to run kobs behind a service like OAuth2 Proxy , which should handle the authentication of users. Examples The following two examples show how you can setup kobs with an OAuth2 Proxy infront using the NGINX Ingress Controller or Istio . Before you are looking into the examples, make sure you have setup your prefered OAuth Provider . We will use Google as our OAuth Provider in the following, which requires a Client ID and a Client Secret. We are installing kobs into a namespace named kobs using the provided Helm Chart . It will be available at demo.kobs.io , so keep in mind that you have to adjust the domain for your setup. NGINX Ingress Controller In the first step we have to create a Deployment, Service and Ingress for the OAuth2 Proxy. With the example wich can be found in the following we are exposing the OAuth2 Proxy via the oauth2-proxy.kobs.io domain. We are also setting all flags and secrets to use Google as our OAuth Provider and the --set-authorization-header and --set-xauthrequest flags to pass the email address of the authenticated user to kobs. OAuth2 Proxy --- apiVersion : apps/v1 kind : Deployment metadata : name : oauth2-proxy spec : replicas : 1 selector : matchLabels : app : oauth2-proxy template : metadata : labels : app : oauth2-proxy spec : containers : - name : kobs image : quay.io/oauth2-proxy/oauth2-proxy:v7.1.2 args : - --provider=google - --skip-provider-button=true - --oidc-issuer-url=https://accounts.google.com - --upstream=static://200 - --http-address=0.0.0.0:4180 - --email-domain=kobs.io - --cookie-domain=.kobs.io - --whitelist-domain=.kobs.io - --set-authorization-header=true - --set-xauthrequest=true env : # For the sake of simplicity we directly setting the Client ID and Client Secret as value. In a production # environment you should set the values for these environment variables from a secret. - name : OAUTH2_PROXY_CLIENT_ID value : <GOOGLE_CLIENT_ID> - name : OAUTH2_PROXY_CLIENT_SECRET value : <GOOGLE_CLIENT_ID> # The Cookie Secret can be generated using the following command: # python -c 'import os,base64; print(base64.urlsafe_b64encode(os.urandom(16)).decode())' - name : OAUTH2_PROXY_COOKIE_SECRET value : 7jctnRZlsQRSFaX76LK53w== - name : OAUTH2_PROXY_COOKIE_NAME value : kobs-demo ports : - containerPort : 4180 name : http protocol : TCP --- apiVersion : v1 kind : Service metadata : name : oauth2-proxy spec : type : ClusterIP selector : app : oauth2-proxy ports : - name : http port : 4180 protocol : TCP targetPort : http --- apiVersion : extensions/v1beta1 kind : Ingress metadata : name : oauth2-proxy annotations : cert-manager.io/cluster-issuer : letsencrypt kubernetes.io/ingress.class : nginx spec : rules : - host : oauth2-proxy.kobs.io http : paths : - backend : serviceName : oauth2-proxy servicePort : http path : / tls : - hosts : - oauth2-proxy.kobs.io secretName : oauth2-proxy-cert When the OAuth2 Proxy is running we can install kobs with the following values file. It will use all the default values from the Helm chart and just enables and configures the Ingress for kobs: ingress : enabled : true annotations : cert-manager.io/cluster-issuer : letsencrypt kubernetes.io/ingress.class : nginx nginx.ingress.kubernetes.io/auth-url : https://oauth2-proxy.kobs.io/oauth2/auth nginx.ingress.kubernetes.io/auth-signin : https://oauth2-proxy.kobs.io/oauth2/start?rd=https://demo.kobs.io nginx.ingress.kubernetes.io/auth-response-headers : 'X-Auth-Request-Email' nginx.ingress.kubernetes.io/configuration-snippet : | auth_request_set $email $upstream_http_x_auth_request_email; add_header X-Auth-Request-Email $email; hosts : - demo.kobs.io tls : - secretName : kobs-cert hosts : - demo.kobs.io When you save the values from above in a file called values.yaml , you can run the following command to install kobs: helm upgrade --install kobs kobs/kobs -f values.yaml Istio In the first step we have to create a Deployment and Service the OAuth2 Proxy. OAuth2 Proxy --- apiVersion : apps/v1 kind : Deployment metadata : name : oauth2-proxy spec : replicas : 1 selector : matchLabels : app : oauth2-proxy template : metadata : labels : app : oauth2-proxy spec : containers : - name : kobs image : quay.io/oauth2-proxy/oauth2-proxy:v7.1.2 args : - --provider=google - --skip-provider-button=true - --oidc-issuer-url=https://accounts.google.com - --upstream=static://200 - --http-address=0.0.0.0:4180 - --email-domain=kobs.io - --cookie-domain=.kobs.io - --whitelist-domain=.kobs.io - --set-authorization-header=true - --set-xauthrequest=true env : # For the sake of simplicity we directly setting the Client ID and Client Secret as value. In a production # environment you should set the values for these environment variables from a secret. - name : OAUTH2_PROXY_CLIENT_ID value : <GOOGLE_CLIENT_ID> - name : OAUTH2_PROXY_CLIENT_SECRET value : <GOOGLE_CLIENT_ID> # The Cookie Secret can be generated using the following command: # python -c 'import os,base64; print(base64.urlsafe_b64encode(os.urandom(16)).decode())' - name : OAUTH2_PROXY_COOKIE_SECRET value : 7jctnRZlsQRSFaX76LK53w== - name : OAUTH2_PROXY_COOKIE_NAME value : kobs-demo ports : - containerPort : 4180 name : http protocol : TCP --- apiVersion : v1 kind : Service metadata : name : oauth2-proxy spec : type : ClusterIP selector : app : oauth2-proxy ports : - name : http port : 4180 protocol : TCP targetPort : http When the OAuth2 Proxy is running we have to define the external authorizer that is allowed to be used in the mesh config. This is currently defined in the extension provider in the mesh config. meshConfig : extensionProviders : - name : oauth2-proxy envoyExtAuthzHttp : service : oauth2-proxy.kobs.svc.cluster.local port : \"4180\" includeHeadersInCheck : [ \"authorization\" , \"cookie\" ] headersToUpstreamOnAllow : [ \"authorization\" , \"x-auth-request-email\" ] The external authorizer is now ready to be used by the authorization policy. --- apiVersion : security.istio.io/v1beta1 kind : AuthorizationPolicy metadata : name : kobs spec : selector : matchLabels : app.kubernetes.io/instance : kobs app.kubernetes.io/name : kobs action : CUSTOM provider : name : oauth2-proxy rules : - to : - operation : hosts : - \"*.kobs.io\" notPaths : - \"/oauth2*\" Now we have to adjust the istio section in the kobs Helm chart. In contrast to the NGINX Ingress Controller example we do not create an additional Ingress / VirtualService for the OAuth2 Proxy. Instead the OAuth2 Proxy is exposed on the same domain as kobs via an additiona route: istio : virtualService : create : true gateways : - istio-system/istio-default-gateway hosts : - demo.kobs.io timeout : 3600s additionalRoutes : - match : - uri : prefix : /oauth2 route : - destination : host : oauth2-proxy.kobs.svc.cluster.local port : number : 4180 timeout : 60s When you save the values from above in a file called values.yaml , you can run the following command to install kobs: helm upgrade --install kobs kobs/kobs -f values.yaml","title":"Authentication"},{"location":"configuration/authentication/#authentication","text":"kobs hasn't any built in authentication mechanism. We recommend to run kobs behind a service like OAuth2 Proxy , which should handle the authentication of users.","title":"Authentication"},{"location":"configuration/authentication/#examples","text":"The following two examples show how you can setup kobs with an OAuth2 Proxy infront using the NGINX Ingress Controller or Istio . Before you are looking into the examples, make sure you have setup your prefered OAuth Provider . We will use Google as our OAuth Provider in the following, which requires a Client ID and a Client Secret. We are installing kobs into a namespace named kobs using the provided Helm Chart . It will be available at demo.kobs.io , so keep in mind that you have to adjust the domain for your setup.","title":"Examples"},{"location":"configuration/authentication/#nginx-ingress-controller","text":"In the first step we have to create a Deployment, Service and Ingress for the OAuth2 Proxy. With the example wich can be found in the following we are exposing the OAuth2 Proxy via the oauth2-proxy.kobs.io domain. We are also setting all flags and secrets to use Google as our OAuth Provider and the --set-authorization-header and --set-xauthrequest flags to pass the email address of the authenticated user to kobs. OAuth2 Proxy --- apiVersion : apps/v1 kind : Deployment metadata : name : oauth2-proxy spec : replicas : 1 selector : matchLabels : app : oauth2-proxy template : metadata : labels : app : oauth2-proxy spec : containers : - name : kobs image : quay.io/oauth2-proxy/oauth2-proxy:v7.1.2 args : - --provider=google - --skip-provider-button=true - --oidc-issuer-url=https://accounts.google.com - --upstream=static://200 - --http-address=0.0.0.0:4180 - --email-domain=kobs.io - --cookie-domain=.kobs.io - --whitelist-domain=.kobs.io - --set-authorization-header=true - --set-xauthrequest=true env : # For the sake of simplicity we directly setting the Client ID and Client Secret as value. In a production # environment you should set the values for these environment variables from a secret. - name : OAUTH2_PROXY_CLIENT_ID value : <GOOGLE_CLIENT_ID> - name : OAUTH2_PROXY_CLIENT_SECRET value : <GOOGLE_CLIENT_ID> # The Cookie Secret can be generated using the following command: # python -c 'import os,base64; print(base64.urlsafe_b64encode(os.urandom(16)).decode())' - name : OAUTH2_PROXY_COOKIE_SECRET value : 7jctnRZlsQRSFaX76LK53w== - name : OAUTH2_PROXY_COOKIE_NAME value : kobs-demo ports : - containerPort : 4180 name : http protocol : TCP --- apiVersion : v1 kind : Service metadata : name : oauth2-proxy spec : type : ClusterIP selector : app : oauth2-proxy ports : - name : http port : 4180 protocol : TCP targetPort : http --- apiVersion : extensions/v1beta1 kind : Ingress metadata : name : oauth2-proxy annotations : cert-manager.io/cluster-issuer : letsencrypt kubernetes.io/ingress.class : nginx spec : rules : - host : oauth2-proxy.kobs.io http : paths : - backend : serviceName : oauth2-proxy servicePort : http path : / tls : - hosts : - oauth2-proxy.kobs.io secretName : oauth2-proxy-cert When the OAuth2 Proxy is running we can install kobs with the following values file. It will use all the default values from the Helm chart and just enables and configures the Ingress for kobs: ingress : enabled : true annotations : cert-manager.io/cluster-issuer : letsencrypt kubernetes.io/ingress.class : nginx nginx.ingress.kubernetes.io/auth-url : https://oauth2-proxy.kobs.io/oauth2/auth nginx.ingress.kubernetes.io/auth-signin : https://oauth2-proxy.kobs.io/oauth2/start?rd=https://demo.kobs.io nginx.ingress.kubernetes.io/auth-response-headers : 'X-Auth-Request-Email' nginx.ingress.kubernetes.io/configuration-snippet : | auth_request_set $email $upstream_http_x_auth_request_email; add_header X-Auth-Request-Email $email; hosts : - demo.kobs.io tls : - secretName : kobs-cert hosts : - demo.kobs.io When you save the values from above in a file called values.yaml , you can run the following command to install kobs: helm upgrade --install kobs kobs/kobs -f values.yaml","title":"NGINX Ingress Controller"},{"location":"configuration/authentication/#istio","text":"In the first step we have to create a Deployment and Service the OAuth2 Proxy. OAuth2 Proxy --- apiVersion : apps/v1 kind : Deployment metadata : name : oauth2-proxy spec : replicas : 1 selector : matchLabels : app : oauth2-proxy template : metadata : labels : app : oauth2-proxy spec : containers : - name : kobs image : quay.io/oauth2-proxy/oauth2-proxy:v7.1.2 args : - --provider=google - --skip-provider-button=true - --oidc-issuer-url=https://accounts.google.com - --upstream=static://200 - --http-address=0.0.0.0:4180 - --email-domain=kobs.io - --cookie-domain=.kobs.io - --whitelist-domain=.kobs.io - --set-authorization-header=true - --set-xauthrequest=true env : # For the sake of simplicity we directly setting the Client ID and Client Secret as value. In a production # environment you should set the values for these environment variables from a secret. - name : OAUTH2_PROXY_CLIENT_ID value : <GOOGLE_CLIENT_ID> - name : OAUTH2_PROXY_CLIENT_SECRET value : <GOOGLE_CLIENT_ID> # The Cookie Secret can be generated using the following command: # python -c 'import os,base64; print(base64.urlsafe_b64encode(os.urandom(16)).decode())' - name : OAUTH2_PROXY_COOKIE_SECRET value : 7jctnRZlsQRSFaX76LK53w== - name : OAUTH2_PROXY_COOKIE_NAME value : kobs-demo ports : - containerPort : 4180 name : http protocol : TCP --- apiVersion : v1 kind : Service metadata : name : oauth2-proxy spec : type : ClusterIP selector : app : oauth2-proxy ports : - name : http port : 4180 protocol : TCP targetPort : http When the OAuth2 Proxy is running we have to define the external authorizer that is allowed to be used in the mesh config. This is currently defined in the extension provider in the mesh config. meshConfig : extensionProviders : - name : oauth2-proxy envoyExtAuthzHttp : service : oauth2-proxy.kobs.svc.cluster.local port : \"4180\" includeHeadersInCheck : [ \"authorization\" , \"cookie\" ] headersToUpstreamOnAllow : [ \"authorization\" , \"x-auth-request-email\" ] The external authorizer is now ready to be used by the authorization policy. --- apiVersion : security.istio.io/v1beta1 kind : AuthorizationPolicy metadata : name : kobs spec : selector : matchLabels : app.kubernetes.io/instance : kobs app.kubernetes.io/name : kobs action : CUSTOM provider : name : oauth2-proxy rules : - to : - operation : hosts : - \"*.kobs.io\" notPaths : - \"/oauth2*\" Now we have to adjust the istio section in the kobs Helm chart. In contrast to the NGINX Ingress Controller example we do not create an additional Ingress / VirtualService for the OAuth2 Proxy. Instead the OAuth2 Proxy is exposed on the same domain as kobs via an additiona route: istio : virtualService : create : true gateways : - istio-system/istio-default-gateway hosts : - demo.kobs.io timeout : 3600s additionalRoutes : - match : - uri : prefix : /oauth2 route : - destination : host : oauth2-proxy.kobs.svc.cluster.local port : number : 4180 timeout : 60s When you save the values from above in a file called values.yaml , you can run the following command to install kobs: helm upgrade --install kobs kobs/kobs -f values.yaml","title":"Istio"},{"location":"configuration/clusters/","text":"Clusters In the moment of writing this, kobs supports two different provides to configure access to Kubernetes clusters. This means that you can use a Kubeconfig file, to grant kobs access to your Kubernetes clusters or you can use the incluster provider, which can be used to grant kobs access to the cluster were it is running on. Field Type Description Required clusters Providers Configure the clusters for kobs, currently this only requires the providers configuration. Yes Providers Field Type Description Required providers []Provider Set a list of providers, which should be used by kobs to get access to your Kubernetes clusters. Yes Provider Field Type Description Required provider string Set the provider type, which should be used. This must be kubeconfig or incluster . Yes kubeconfig Kubeconfig (oneof) Configuration of the Kubeconfig provider. No incluster Incluster (oneof) Configuration of the incluster provider. No Kubeconfig The following configuration can be used to use a Kubeconfig file for kobs, where the file is placed in the can be found in the following location ${HOME}/.kube/config . clusters : providers : - provider : kubeconfig kubeconfig : path : ${HOME}/.kube/config Field Type Description Required path string Path to a Kubeconfig file. Yes Incluster The following configuration can be used to use the incluster provider. clusters : providers : - provider : incluster incluster : name : kobs-demo Field Type Description Required name string Name of the cluster, which is used in the frontend. Yes","title":"Clusters"},{"location":"configuration/clusters/#clusters","text":"In the moment of writing this, kobs supports two different provides to configure access to Kubernetes clusters. This means that you can use a Kubeconfig file, to grant kobs access to your Kubernetes clusters or you can use the incluster provider, which can be used to grant kobs access to the cluster were it is running on. Field Type Description Required clusters Providers Configure the clusters for kobs, currently this only requires the providers configuration. Yes","title":"Clusters"},{"location":"configuration/clusters/#providers","text":"Field Type Description Required providers []Provider Set a list of providers, which should be used by kobs to get access to your Kubernetes clusters. Yes","title":"Providers"},{"location":"configuration/clusters/#provider","text":"Field Type Description Required provider string Set the provider type, which should be used. This must be kubeconfig or incluster . Yes kubeconfig Kubeconfig (oneof) Configuration of the Kubeconfig provider. No incluster Incluster (oneof) Configuration of the incluster provider. No","title":"Provider"},{"location":"configuration/clusters/#kubeconfig","text":"The following configuration can be used to use a Kubeconfig file for kobs, where the file is placed in the can be found in the following location ${HOME}/.kube/config . clusters : providers : - provider : kubeconfig kubeconfig : path : ${HOME}/.kube/config Field Type Description Required path string Path to a Kubeconfig file. Yes","title":"Kubeconfig"},{"location":"configuration/clusters/#incluster","text":"The following configuration can be used to use the incluster provider. clusters : providers : - provider : incluster incluster : name : kobs-demo Field Type Description Required name string Name of the cluster, which is used in the frontend. Yes","title":"Incluster"},{"location":"configuration/getting-started/","text":"Getting Started kobs can be configured using a configuration file in yaml format, command-line arguments and environment variables. The configuration file is used to provide the cluster and plugin configuration. The command-line arguments and environment variables are used to customize the log behavior, ports or cache duration. Command-line Arguments and Environment Variables The following command-line arguments and environment variables are available. Command-line Argument Environment Variable Description Default --api.address KOBS_API_ADDRESS The address, where the API server is listen on. :15220 --api.auth-header KOBS_API_AUTH_HEADER The header, which contains the details about the authenticated user. More information can be found in the Authentication section. X-Auth-Request-Email --app.address KOBS_APP_ADDRESS The address, where the Application server is listen on. :15219 --app.assets KOBS_APP_ASSETS The location of the assets directory. app/build --clusters.cache-duration.namespaces KOBS_CLUSTERS_CACHE_DURATION_NAMESPACES The duration, for how long requests to get the list of namespaces should be cached. 5m --config KOBS_CONFIG Name of the configuration file. config.yaml --log.format KOBS_LOG_FORMAT Set the output format of the logs. Must be plain or json . plain --log.level KOBS_LOG_LEVEL Set the log level. Must be trace , debug , info , warn , error , fatal or panic . info --metrics.address KOBS_METRICS_ADDRESS The address, where the Prometheus metrics are served. :15221 --version Print version information. false Configuration File kobs requires a configuration file in yaml format for the cluster and plugin configuration. By default kobs will look for a config.yaml file in the directory of the kobs binary. To set a custom location of the configuration file your can use the --config command-line flag or the KOBS_CONFIG environment variable. The config file consists of two section. The first one is the clusters configuration , which is used to configure the access to a Kubernetes cluster for kobs. The second section is used to configure all plugins for kobs. clusters : providers : - provider : incluster incluster : name : kobs-demo plugins : prometheus : - name : prometheus displayName : Prometheus description : \"From metrics to insight: Power your metrics and alerting with a leading open-source monitoring solution.\" address : http://prometheus.istio-system.svc.cluster.local:9090 elasticsearch : - name : elasticsearch displayName : Elasticsearch description : \"A distributed, RESTful search and analytics engine capable of addressing a growing number of use cases.\" address : http://elasticsearch-es-http.elastic-system.svc.cluster.local:9200 jaeger : - name : jaeger displayName : Jaeger description : \"Open-source, end-to-end distributed tracing: Monitor and troubleshoot transactions in complex distributed systems\" address : http://tracing.istio-system.svc.cluster.local:80/jaeger You can also use environment variables within the configuration file. To use an environment variable you can place the following placeholder in the config file: ${NAME_OF_THE_ENVIRONMENT_VARIABLE} . When kobs reads the file the placeholder will be replaced, with the value of the environment variable. This allows you to provide confidential data via an environment variable, instead of putting them into the file.","title":"Getting Started"},{"location":"configuration/getting-started/#getting-started","text":"kobs can be configured using a configuration file in yaml format, command-line arguments and environment variables. The configuration file is used to provide the cluster and plugin configuration. The command-line arguments and environment variables are used to customize the log behavior, ports or cache duration.","title":"Getting Started"},{"location":"configuration/getting-started/#command-line-arguments-and-environment-variables","text":"The following command-line arguments and environment variables are available. Command-line Argument Environment Variable Description Default --api.address KOBS_API_ADDRESS The address, where the API server is listen on. :15220 --api.auth-header KOBS_API_AUTH_HEADER The header, which contains the details about the authenticated user. More information can be found in the Authentication section. X-Auth-Request-Email --app.address KOBS_APP_ADDRESS The address, where the Application server is listen on. :15219 --app.assets KOBS_APP_ASSETS The location of the assets directory. app/build --clusters.cache-duration.namespaces KOBS_CLUSTERS_CACHE_DURATION_NAMESPACES The duration, for how long requests to get the list of namespaces should be cached. 5m --config KOBS_CONFIG Name of the configuration file. config.yaml --log.format KOBS_LOG_FORMAT Set the output format of the logs. Must be plain or json . plain --log.level KOBS_LOG_LEVEL Set the log level. Must be trace , debug , info , warn , error , fatal or panic . info --metrics.address KOBS_METRICS_ADDRESS The address, where the Prometheus metrics are served. :15221 --version Print version information. false","title":"Command-line Arguments and Environment Variables"},{"location":"configuration/getting-started/#configuration-file","text":"kobs requires a configuration file in yaml format for the cluster and plugin configuration. By default kobs will look for a config.yaml file in the directory of the kobs binary. To set a custom location of the configuration file your can use the --config command-line flag or the KOBS_CONFIG environment variable. The config file consists of two section. The first one is the clusters configuration , which is used to configure the access to a Kubernetes cluster for kobs. The second section is used to configure all plugins for kobs. clusters : providers : - provider : incluster incluster : name : kobs-demo plugins : prometheus : - name : prometheus displayName : Prometheus description : \"From metrics to insight: Power your metrics and alerting with a leading open-source monitoring solution.\" address : http://prometheus.istio-system.svc.cluster.local:9090 elasticsearch : - name : elasticsearch displayName : Elasticsearch description : \"A distributed, RESTful search and analytics engine capable of addressing a growing number of use cases.\" address : http://elasticsearch-es-http.elastic-system.svc.cluster.local:9200 jaeger : - name : jaeger displayName : Jaeger description : \"Open-source, end-to-end distributed tracing: Monitor and troubleshoot transactions in complex distributed systems\" address : http://tracing.istio-system.svc.cluster.local:80/jaeger You can also use environment variables within the configuration file. To use an environment variable you can place the following placeholder in the config file: ${NAME_OF_THE_ENVIRONMENT_VARIABLE} . When kobs reads the file the placeholder will be replaced, with the value of the environment variable. This allows you to provide confidential data via an environment variable, instead of putting them into the file.","title":"Configuration File"},{"location":"configuration/plugins/","text":"Plugins Plugins can be used to extend the functions of kobs. They can be configured using the configuration file. The useage instruction for each plugin can be found in the plugins section of the documentation. Field Type Description Required applications Applications Configure the caching behaviour for the applications plugin. No elasticsearch []Elasticsearch Configure multiple Elasticsearch instances, which can be used within kobs. No jaeger []Jaeger Configure multiple Jaeger instances, which can be used within kobs. No kiali []Kiali Configure multiple Kiali instances, which can be used within kobs. No opsgenie []Opsgenie Configure the Opsgenie API, which can be used within kobs. No prometheus []Prometheus Configure multiple Prometheus instances, which can be used within kobs. No resources Resources Configuration for the resources plugin. No Applications The following configuration can be used to configure the cache duration for applications. plugins : applications : topologyCacheDuration : 5m teamsCacheDuration : 5m Field Type Description Required topologyCacheDuration duration The duration for how long the topology graph should be cached. The default value is 1h . No teamsCacheDuration duration The duration for how long the teams for an application should be cached. The default value is 1h . No Elasticsearch The following config can be used to grant kobs access to a Elasticsearch instance running on elasticsearch.kobs.io and is protected with basic authentication. The credentials will be provided by the environment variables ES_USERANME and ES_PASSWORD . plugins : elasticsearch : - name : Elasticsearch description : Elasticsearch can be used for the logs of your application. address : https://elasticsearch.kobs.io username : ${ES_USERNAME} password : ${ES_PASSWORD} Field Type Description Required name string Name of the Elasticsearch instance. Yes displayName string Name of the Elasticsearch as it is shown in the UI. Yes descriptions string Description of the Elasticsearch instance. No address string Address of the Elasticsearch instance. Yes username string Username to access an Elasticsearch instance via basic authentication. No password string Password to access an Elasticsearch instance via basic authentication. No token string Token to access an Elasticsearch instance via token based authentication. No Jaeger The following configuration can be used to access a Jaeger instances running on jaeger.kobs.io and is protected using token based authentication. The token is loaded from the JAEGER_TOKEN environment variable. plugins : jaeger : - name : Jaeger description : Jaeger can be used for the traces of your application. address : https://jaeger.kobs.io token : ${JAEGER_TOKEN} Field Type Description Required name string Name of the Jaeger instance. Yes displayName string Name of the Jaeger as it is shown in the UI. Yes descriptions string Description of the Jaeger instance. No address string Address of the Jaeger instance. Yes username string Username to access a Jaeger instance via basic authentication. No password string Password to access a Jaeger instance via basic authentication. No token string Token to access a Jaeger instance via token based authentication. No Kiali The following configuration can be used to access a Kiali instances running on kiali.kobs.io . We also enable the visualization of the traffic and set the threshold to mark edges with degraded performance or failures. plugins : kiali : - name : Kiali description : Service mesh management for Istio. address : https://kiali.kobs.io traffic : degraded : 1 failure : 5 Field Type Description Required name string Name of the Kiali instance. Yes displayName string Name of the Kiali instance as it is shown in the UI. Yes descriptions string Description of the Kiali instance. No address string Address of the Kiali instance. Yes username string Username to access a Kiali instance via basic authentication. No password string Password to access a Kiali instance via basic authentication. No token string Token to access a Kiali instance via token based authentication. No traffic.failure number Threshold to mark edges with failures. This must be a number between 0 and 100 . The default value is 5 . No traffic.degraded number Threshold to mark edges with degraded performance. This must be a number between 0 and 100 . The default value is 1 . No Opsgenie The following configuration can be used to access the Opsgenie API. plugins : opsgenie : - name : opsgenie displayName : Opsgenie description : On-call and alert management to keep services always on. apiUrl : api.eu.opsgenie.com apiKey : ${OPSGENIE_API_KEY} url : https://<your-organisation>.app.eu.opsgenie.com actions : acknowledge : true snooze : true close : true Field Type Description Required name string Name of the Opsgenie instance. Yes displayName string Name of the Opsgenie instance as it is shown in the UI. Yes descriptions string Description of the Opsgenie instance. No apiKey string API Key for the Opsgenie API. More information can be found at API key management . Yes apiUrl string API URL for the Opsgenie API. Must be api.opsgenie.com or api.eu.opsgenie.com . Yes url string The address for the Opsgenie account of your organisation. No actions.acknowledge boolean Allow users to acknowledge Opsgenie alerts via kobs. No actions.snooze boolean Allow users to snooze Opsgenie alerts via kobs. No actions.close boolean Allow users to close Opsgenie alerts via kobs. No Prometheus The following configuration can be used to access a Prometheus instance, which is running in the same cluster as kobs. plugins : prometheus : - name : Prometheus description : Prometheus can be used for the metrics of your application. address : http://prometheus.istio-system.svc.cluster.local:9090 Field Type Description Required name string Name of the Prometheus instance. Yes displayName string Name of the Elasticsearch as it is shown in the UI. Yes descriptions string Description of the Prometheus instance. No address string Address of the Prometheus instance. Yes username string Username to access a Prometheus instance via basic authentication. No password string Password to access a Prometheus instance via basic authentication. No token string Token to access a Prometheus instance via token based authentication. No Resources The following configuration can be used to forbid several resources. This means that the provided resources can not be retrieved via the kobs API. plugins : resources : forbidden : - secrets webSocket : address : ws://localhost:15220 allowAllOrigins : true Field Type Description Required forbidden []string A list of resources, which can not be retrieved via the kobs API. No webSocket.address string The address, which should be used for the WebSocket connection. By default this will be the current host, but it can be overwritten for development purposes. No webSocket.allowAllOrigins boolean When this is true , WebSocket connections are allowed for all origins. This should only be used for development. No ephemeralContainers []EphemeralContainer A list of templates for Ephemeral Containers, which can be used to debug running pods . No","title":"Plugins"},{"location":"configuration/plugins/#plugins","text":"Plugins can be used to extend the functions of kobs. They can be configured using the configuration file. The useage instruction for each plugin can be found in the plugins section of the documentation. Field Type Description Required applications Applications Configure the caching behaviour for the applications plugin. No elasticsearch []Elasticsearch Configure multiple Elasticsearch instances, which can be used within kobs. No jaeger []Jaeger Configure multiple Jaeger instances, which can be used within kobs. No kiali []Kiali Configure multiple Kiali instances, which can be used within kobs. No opsgenie []Opsgenie Configure the Opsgenie API, which can be used within kobs. No prometheus []Prometheus Configure multiple Prometheus instances, which can be used within kobs. No resources Resources Configuration for the resources plugin. No","title":"Plugins"},{"location":"configuration/plugins/#applications","text":"The following configuration can be used to configure the cache duration for applications. plugins : applications : topologyCacheDuration : 5m teamsCacheDuration : 5m Field Type Description Required topologyCacheDuration duration The duration for how long the topology graph should be cached. The default value is 1h . No teamsCacheDuration duration The duration for how long the teams for an application should be cached. The default value is 1h . No","title":"Applications"},{"location":"configuration/plugins/#elasticsearch","text":"The following config can be used to grant kobs access to a Elasticsearch instance running on elasticsearch.kobs.io and is protected with basic authentication. The credentials will be provided by the environment variables ES_USERANME and ES_PASSWORD . plugins : elasticsearch : - name : Elasticsearch description : Elasticsearch can be used for the logs of your application. address : https://elasticsearch.kobs.io username : ${ES_USERNAME} password : ${ES_PASSWORD} Field Type Description Required name string Name of the Elasticsearch instance. Yes displayName string Name of the Elasticsearch as it is shown in the UI. Yes descriptions string Description of the Elasticsearch instance. No address string Address of the Elasticsearch instance. Yes username string Username to access an Elasticsearch instance via basic authentication. No password string Password to access an Elasticsearch instance via basic authentication. No token string Token to access an Elasticsearch instance via token based authentication. No","title":"Elasticsearch"},{"location":"configuration/plugins/#jaeger","text":"The following configuration can be used to access a Jaeger instances running on jaeger.kobs.io and is protected using token based authentication. The token is loaded from the JAEGER_TOKEN environment variable. plugins : jaeger : - name : Jaeger description : Jaeger can be used for the traces of your application. address : https://jaeger.kobs.io token : ${JAEGER_TOKEN} Field Type Description Required name string Name of the Jaeger instance. Yes displayName string Name of the Jaeger as it is shown in the UI. Yes descriptions string Description of the Jaeger instance. No address string Address of the Jaeger instance. Yes username string Username to access a Jaeger instance via basic authentication. No password string Password to access a Jaeger instance via basic authentication. No token string Token to access a Jaeger instance via token based authentication. No","title":"Jaeger"},{"location":"configuration/plugins/#kiali","text":"The following configuration can be used to access a Kiali instances running on kiali.kobs.io . We also enable the visualization of the traffic and set the threshold to mark edges with degraded performance or failures. plugins : kiali : - name : Kiali description : Service mesh management for Istio. address : https://kiali.kobs.io traffic : degraded : 1 failure : 5 Field Type Description Required name string Name of the Kiali instance. Yes displayName string Name of the Kiali instance as it is shown in the UI. Yes descriptions string Description of the Kiali instance. No address string Address of the Kiali instance. Yes username string Username to access a Kiali instance via basic authentication. No password string Password to access a Kiali instance via basic authentication. No token string Token to access a Kiali instance via token based authentication. No traffic.failure number Threshold to mark edges with failures. This must be a number between 0 and 100 . The default value is 5 . No traffic.degraded number Threshold to mark edges with degraded performance. This must be a number between 0 and 100 . The default value is 1 . No","title":"Kiali"},{"location":"configuration/plugins/#opsgenie","text":"The following configuration can be used to access the Opsgenie API. plugins : opsgenie : - name : opsgenie displayName : Opsgenie description : On-call and alert management to keep services always on. apiUrl : api.eu.opsgenie.com apiKey : ${OPSGENIE_API_KEY} url : https://<your-organisation>.app.eu.opsgenie.com actions : acknowledge : true snooze : true close : true Field Type Description Required name string Name of the Opsgenie instance. Yes displayName string Name of the Opsgenie instance as it is shown in the UI. Yes descriptions string Description of the Opsgenie instance. No apiKey string API Key for the Opsgenie API. More information can be found at API key management . Yes apiUrl string API URL for the Opsgenie API. Must be api.opsgenie.com or api.eu.opsgenie.com . Yes url string The address for the Opsgenie account of your organisation. No actions.acknowledge boolean Allow users to acknowledge Opsgenie alerts via kobs. No actions.snooze boolean Allow users to snooze Opsgenie alerts via kobs. No actions.close boolean Allow users to close Opsgenie alerts via kobs. No","title":"Opsgenie"},{"location":"configuration/plugins/#prometheus","text":"The following configuration can be used to access a Prometheus instance, which is running in the same cluster as kobs. plugins : prometheus : - name : Prometheus description : Prometheus can be used for the metrics of your application. address : http://prometheus.istio-system.svc.cluster.local:9090 Field Type Description Required name string Name of the Prometheus instance. Yes displayName string Name of the Elasticsearch as it is shown in the UI. Yes descriptions string Description of the Prometheus instance. No address string Address of the Prometheus instance. Yes username string Username to access a Prometheus instance via basic authentication. No password string Password to access a Prometheus instance via basic authentication. No token string Token to access a Prometheus instance via token based authentication. No","title":"Prometheus"},{"location":"configuration/plugins/#resources","text":"The following configuration can be used to forbid several resources. This means that the provided resources can not be retrieved via the kobs API. plugins : resources : forbidden : - secrets webSocket : address : ws://localhost:15220 allowAllOrigins : true Field Type Description Required forbidden []string A list of resources, which can not be retrieved via the kobs API. No webSocket.address string The address, which should be used for the WebSocket connection. By default this will be the current host, but it can be overwritten for development purposes. No webSocket.allowAllOrigins boolean When this is true , WebSocket connections are allowed for all origins. This should only be used for development. No ephemeralContainers []EphemeralContainer A list of templates for Ephemeral Containers, which can be used to debug running pods . No","title":"Resources"},{"location":"contributing/add-a-plugin/","text":"Add a Plugin Note The documentation will be updated once the new plugin system is completly done. Until then you can take a look at the other plugins in the plugins directory.","title":"Add a Plugin"},{"location":"contributing/add-a-plugin/#add-a-plugin","text":"Note The documentation will be updated once the new plugin system is completly done. Until then you can take a look at the other plugins in the plugins directory.","title":"Add a Plugin"},{"location":"contributing/development-using-the-demo/","text":"Development using the Demo The created kind cluster in the demo comes with a local registry, so that the demo can be used within your development flow. For that you have to build the Docker image with your changes and push it into the local registry: docker build -f ./cmd/kobs/Dockerfile -t localhost:5000/kobs:dev . docker push localhost:5000/kobs:dev When you have pushed your custom image, you can run the following command to deploy kobs with the new image: kustomize build deploy/demo/kobs/dev | kubectl apply -f - Finally you can check if the kobs Pod is using your image, with the following command: k get pods -n kobs -l app.kubernetes.io/name = kobs -o yaml | grep \"image: localhost:5000/kobs:dev\" If you make changes to the CRDs for kobs you can deploy them using the following command: kustomize build deploy/kustomize/crds | kubectl apply -f -","title":"Development using the Demo"},{"location":"contributing/development-using-the-demo/#development-using-the-demo","text":"The created kind cluster in the demo comes with a local registry, so that the demo can be used within your development flow. For that you have to build the Docker image with your changes and push it into the local registry: docker build -f ./cmd/kobs/Dockerfile -t localhost:5000/kobs:dev . docker push localhost:5000/kobs:dev When you have pushed your custom image, you can run the following command to deploy kobs with the new image: kustomize build deploy/demo/kobs/dev | kubectl apply -f - Finally you can check if the kobs Pod is using your image, with the following command: k get pods -n kobs -l app.kubernetes.io/name = kobs -o yaml | grep \"image: localhost:5000/kobs:dev\" If you make changes to the CRDs for kobs you can deploy them using the following command: kustomize build deploy/kustomize/crds | kubectl apply -f -","title":"Development using the Demo"},{"location":"contributing/getting-started/","text":"Getting Started Every contribution to kobs is welcome, whether it is reporting a bug, submitting a fix, proposing new features or becoming a maintainer. To make contributing to kobs as easy as possible you will find more details for the development flow in our Contribution Guideline . Please also follow our Code of Conduct in all your interactions with the project.","title":"Getting Started"},{"location":"contributing/getting-started/#getting-started","text":"Every contribution to kobs is welcome, whether it is reporting a bug, submitting a fix, proposing new features or becoming a maintainer. To make contributing to kobs as easy as possible you will find more details for the development flow in our Contribution Guideline . Please also follow our Code of Conduct in all your interactions with the project.","title":"Getting Started"},{"location":"contributing/release/","text":"Release Before a new version of kobs can be release we have to make sure that the changelog contains all added, fixed and changed feature. When this is the case we can replace the ## Unreleased line for the new version, e.g. ## [v0.4.0](https://github.com/kobsio/kobs/releases/tag/v0.4.0) (2021-07-14) Each release entry contains a link to the GitHub release and the date, when the release was created. When we have updated the changelog we can create a new section for unreleased features. In the last step before we can create a new tag we have to update the following files, so that they contain the correct version for the new Docker image: Chart.yaml : Update the appVersion field and bump the version field. values.yaml : Set the new tag in the kobs.image.tag value. deployment.yaml : Update the Docker image in the Kustomize deployment file. helm.md : Update the table with the Helm values, so that it contains the new value for the kobs.image.tag . Now we can use our Makefile to create a new tag: make release-patch make release-minor make release-major When the new tag was created we run a GitHub Action to create the new Docker image and to publish the new Helm chart version. While the GitHub Actions are running we can create a new release on GitHub, where we are using the changelog as description. Publish NPM Packages In the next step we have to publish a new version for our NPM packages. To do that we have to run the following commands, where <version> should be replaced with the version which was just created: yarn build npx lerna publish <version> --force-publish --no-changelog --no-git-tag-version --no-private --no-push git restore . Note To check if we are using the correct user to publish the packages we can run npm whoami and npm adduser to use the correct one. If publishing fails with a message like lerna ERR! E402 You must sign up for private packages we have to run npm config set access public .","title":"Release"},{"location":"contributing/release/#release","text":"Before a new version of kobs can be release we have to make sure that the changelog contains all added, fixed and changed feature. When this is the case we can replace the ## Unreleased line for the new version, e.g. ## [v0.4.0](https://github.com/kobsio/kobs/releases/tag/v0.4.0) (2021-07-14) Each release entry contains a link to the GitHub release and the date, when the release was created. When we have updated the changelog we can create a new section for unreleased features. In the last step before we can create a new tag we have to update the following files, so that they contain the correct version for the new Docker image: Chart.yaml : Update the appVersion field and bump the version field. values.yaml : Set the new tag in the kobs.image.tag value. deployment.yaml : Update the Docker image in the Kustomize deployment file. helm.md : Update the table with the Helm values, so that it contains the new value for the kobs.image.tag . Now we can use our Makefile to create a new tag: make release-patch make release-minor make release-major When the new tag was created we run a GitHub Action to create the new Docker image and to publish the new Helm chart version. While the GitHub Actions are running we can create a new release on GitHub, where we are using the changelog as description.","title":"Release"},{"location":"contributing/release/#publish-npm-packages","text":"In the next step we have to publish a new version for our NPM packages. To do that we have to run the following commands, where <version> should be replaced with the version which was just created: yarn build npx lerna publish <version> --force-publish --no-changelog --no-git-tag-version --no-private --no-push git restore . Note To check if we are using the correct user to publish the packages we can run npm whoami and npm adduser to use the correct one. If publishing fails with a message like lerna ERR! E402 You must sign up for private packages we have to run npm config set access public .","title":"Publish NPM Packages"},{"location":"contributing/using-the-kobsio-app/","text":"Using the kobsio/app The kobsio/app can be used to build your own version of kobs. This is required if you want to use one of the community plugins or if you want to build your own private plugins for kobs. To use the kobsio/app repository you can use the Use this template button from the repository to create your own version of kobs. Add a new Plugin To add a new plugin you have to adjust two files: The app/src/index.tsx file for the React UI of the plugin and the cmd/kobs/plugins/plugins.go file to register the API routes for your plugin. To add the React UI for the plugin you have to import IPluginComponents object from the Node module: import React from 'react'; import ReactDOM from 'react-dom'; import './index.css'; import { App } from '@kobsio/plugin-core'; import resourcesPlugin from '@kobsio/plugin-resources'; import helloWorldPlugin from './plugins/helloworld'; +import myNewPlugin from 'my-new-plugin'; ReactDOM.render( <React.StrictMode> <App plugins={{ ...resourcesPlugin, + ...myNewPlugin, }} /> </React.StrictMode>, document.getElementById('root') ); To register the API routes for the plugin you have to add the Config for the plugin to the plugins configuration and you have to Register the chi router for the plugin: package plugins import ( \"net/http\" \"github.com/kobsio/kobs/pkg/api/clusters\" \"github.com/kobsio/kobs/pkg/api/plugins/plugin\" \"github.com/go-chi/chi/v5\" \"github.com/go-chi/render\" // Import all plugins, which should be used with the kobs instance. By default this are all first party plugins from // the plugins folder. \"github.com/kobsio/app/pkg/plugins/helloworld\" + \"github.com/my-new-plugin/my-new-plugin\" \"github.com/kobsio/kobs/plugins/resources\" ) // Config holds the configuration for all plugins. We have to add the configuration for all the imported plugins. type Config struct { Resources resources.Config `json:\"resources\"` HelloWorld helloworld.Config `json:\"helloworld\"` + MyNewPlugin mynewplugin.Config `json:\"myNewPlugin\"` } // Router implements the router for the plugins package. This only registeres one route which is used to return all the // configured plugins. type Router struct { *chi.Mux plugins *plugin.Plugins } // getPlugins returns all registered plugin instances. func (router *Router) getPlugins(w http.ResponseWriter, r *http.Request) { render.JSON(w, r, router.plugins) } // Register is used to register all api routes for plugins. func Register(clusters *clusters.Clusters, config Config) chi.Router { router := Router{ chi.NewRouter(), &plugin.Plugins{}, } router.Get(\"/\", router.getPlugins) // Register all plugins router.Mount(resources.Route, resources.Register(clusters, router.plugins, config.Resources)) router.Mount(helloworld.Route, helloworld.Register(clusters, router.plugins, config.HelloWorld)) + router.Mount(mynewplugin.Route, mynewplugin.Register(clusters, router.plugins, config.MyNewPlugin)) return router } Build To build your own version of kobs you have to build the React you first. For that switch into the app folder and run yarn build : cd app yarn build Then you can go back to the root folder of the repository and build the Go application: make build The above command puts the binary into a folder called bin . To start kobs you can use the following command: ./bin/kobs --config = config.yaml --development To build the Docker image for kobs you can use the Dockerfile from the cmd/kobs folder: docker build -f ./cmd/kobs/Dockerfile -t kobsio/kobs:dev . docker run -it --rm --name kobs -p 15219 :15219 -p 15220 :15220 -p 15221 :15221 -v $( pwd ) /config.yaml:/kobs/config.yaml -v $HOME /.kube/config:/.kube/config kobsio/kobs:dev --development Develop a private Plugin If you want to develop your own private plugins within your version of the kobsio/app repository, we recommend that you create a new folder for each plugin. The frontend code for your plugin should go into the app/src/plugins folder and the backend code into the pkg/plugins folder. To get a better idea for the structure of your plugin you can take a look at the helloworld plugin in the app/src/plugins/helloworld and pkg/plugins/helloworld folders. More information on the development of a plugin can be found in the documentation: Add a Plugin .","title":"Using the kobsio/app"},{"location":"contributing/using-the-kobsio-app/#using-the-kobsioapp","text":"The kobsio/app can be used to build your own version of kobs. This is required if you want to use one of the community plugins or if you want to build your own private plugins for kobs. To use the kobsio/app repository you can use the Use this template button from the repository to create your own version of kobs.","title":"Using the kobsio/app"},{"location":"contributing/using-the-kobsio-app/#add-a-new-plugin","text":"To add a new plugin you have to adjust two files: The app/src/index.tsx file for the React UI of the plugin and the cmd/kobs/plugins/plugins.go file to register the API routes for your plugin. To add the React UI for the plugin you have to import IPluginComponents object from the Node module: import React from 'react'; import ReactDOM from 'react-dom'; import './index.css'; import { App } from '@kobsio/plugin-core'; import resourcesPlugin from '@kobsio/plugin-resources'; import helloWorldPlugin from './plugins/helloworld'; +import myNewPlugin from 'my-new-plugin'; ReactDOM.render( <React.StrictMode> <App plugins={{ ...resourcesPlugin, + ...myNewPlugin, }} /> </React.StrictMode>, document.getElementById('root') ); To register the API routes for the plugin you have to add the Config for the plugin to the plugins configuration and you have to Register the chi router for the plugin: package plugins import ( \"net/http\" \"github.com/kobsio/kobs/pkg/api/clusters\" \"github.com/kobsio/kobs/pkg/api/plugins/plugin\" \"github.com/go-chi/chi/v5\" \"github.com/go-chi/render\" // Import all plugins, which should be used with the kobs instance. By default this are all first party plugins from // the plugins folder. \"github.com/kobsio/app/pkg/plugins/helloworld\" + \"github.com/my-new-plugin/my-new-plugin\" \"github.com/kobsio/kobs/plugins/resources\" ) // Config holds the configuration for all plugins. We have to add the configuration for all the imported plugins. type Config struct { Resources resources.Config `json:\"resources\"` HelloWorld helloworld.Config `json:\"helloworld\"` + MyNewPlugin mynewplugin.Config `json:\"myNewPlugin\"` } // Router implements the router for the plugins package. This only registeres one route which is used to return all the // configured plugins. type Router struct { *chi.Mux plugins *plugin.Plugins } // getPlugins returns all registered plugin instances. func (router *Router) getPlugins(w http.ResponseWriter, r *http.Request) { render.JSON(w, r, router.plugins) } // Register is used to register all api routes for plugins. func Register(clusters *clusters.Clusters, config Config) chi.Router { router := Router{ chi.NewRouter(), &plugin.Plugins{}, } router.Get(\"/\", router.getPlugins) // Register all plugins router.Mount(resources.Route, resources.Register(clusters, router.plugins, config.Resources)) router.Mount(helloworld.Route, helloworld.Register(clusters, router.plugins, config.HelloWorld)) + router.Mount(mynewplugin.Route, mynewplugin.Register(clusters, router.plugins, config.MyNewPlugin)) return router }","title":"Add a new Plugin"},{"location":"contributing/using-the-kobsio-app/#build","text":"To build your own version of kobs you have to build the React you first. For that switch into the app folder and run yarn build : cd app yarn build Then you can go back to the root folder of the repository and build the Go application: make build The above command puts the binary into a folder called bin . To start kobs you can use the following command: ./bin/kobs --config = config.yaml --development To build the Docker image for kobs you can use the Dockerfile from the cmd/kobs folder: docker build -f ./cmd/kobs/Dockerfile -t kobsio/kobs:dev . docker run -it --rm --name kobs -p 15219 :15219 -p 15220 :15220 -p 15221 :15221 -v $( pwd ) /config.yaml:/kobs/config.yaml -v $HOME /.kube/config:/.kube/config kobsio/kobs:dev --development","title":"Build"},{"location":"contributing/using-the-kobsio-app/#develop-a-private-plugin","text":"If you want to develop your own private plugins within your version of the kobsio/app repository, we recommend that you create a new folder for each plugin. The frontend code for your plugin should go into the app/src/plugins folder and the backend code into the pkg/plugins folder. To get a better idea for the structure of your plugin you can take a look at the helloworld plugin in the app/src/plugins/helloworld and pkg/plugins/helloworld folders. More information on the development of a plugin can be found in the documentation: Add a Plugin .","title":"Develop a private Plugin"},{"location":"installation/demo/","text":"Demo The kobs demo can be used to try out the kobs. Within the demo you will deploy Istio via the Istio Operator , Prometheus , Elasticsearch , Jaeger , Kiali and the Bookinfo Application . Create a Kubernetes Cluster using Kind The demo uses kind to create a local Kubernetes cluster, to deploy the mentioned services. Note If you are using minikube , please check the minikube and Istio documentation to expose kobs and the Bookinfo Application to access them via your browser. To create a Kubernetes cluster using kind your can run the kind-with-registry.sh script. The script will create a kind cluster with one node, configures a local Docker registry and sets the correct port mappings, so that you can access kobs via your browser later. deploy/demo/kind-with-registry.sh When your cluster is ready, you should see the following message: Creating cluster \"kobs-demo\" ... \u2713 Ensuring node image (kindest/node:v1.19.1) \ud83d\uddbc \u2713 Preparing nodes \ud83d\udce6 \u2713 Writing configuration \ud83d\udcdc \u2713 Starting control-plane \ud83d\udd79\ufe0f \u2713 Installing CNI \ud83d\udd0c \u2713 Installing StorageClass \ud83d\udcbe Set kubectl context to \"kind-kobs-demo\" You can now use your cluster with: kubectl cluster-info --context kind-kobs-demo To use the cluster you can switch your kubectl context using kubectl cluster-info --context kind-kobs-demo . Install all Services Now we can deploy all the CRDs for kobs, the metrics-server and the kube-state-metrics : kustomize build deploy/kustomize/crds | kubectl apply -f - kustomize build deploy/demo/kube-system | kubectl apply -f - Now we can deploy all resources for the istio-operator and istio-system namespace. We are using Istio to get some nice Prometheus metrics for the Bookinfo Application and for the integration with Jaeger to get some traces. To install the Operator and Istio run the following commands, this will also deploy Prometheus, Jaeger and Kiali in the istio-system namespace: kustomize build deploy/demo/istio-operator | kubectl apply -f - kustomize build deploy/demo/istio-system | kubectl apply -f - When Istio is up and running, we can install Elasticsearch and Filebeat to collect the logs for the Bookinfo Application and kobs to have all our observability tools in one UI: kustomize build deploy/demo/elastic-system | kubectl apply -f - kustomize build deploy/demo/kobs/main | kubectl apply -f - The above commands are also installing kobs, with the incluster provider and the correct configuration for the Prometheus, Elasticsearch and Jaeger plugin. The complete configuration file looks as follows: clusters : providers : - provider : incluster incluster : name : kobs-demo plugins : prometheus : - name : prometheus displayName : Prometheus description : \"From metrics to insight: Power your metrics and alerting with a leading open-source monitoring solution.\" address : http://prometheus.istio-system.svc.cluster.local:9090 elasticsearch : - name : elasticsearch displayName : Elasticsearch description : \"A distributed, RESTful search and analytics engine capable of addressing a growing number of use cases.\" address : http://elasticsearch-es-http.elastic-system.svc.cluster.local:9200 jaeger : - name : jaeger displayName : Jaeger description : \"Open-source, end-to-end distributed tracing: Monitor and troubleshoot transactions in complex distributed systems\" address : http://tracing.istio-system.svc.cluster.local:80/jaeger The last step, befor you can explore the functions of kobs, is to install the Bookinfo Application. The application displays information about a book, similar to a single catalog entry of an online book store. Displayed on the page is a description of the book, book details (ISBN, number of pages, and so on), and a few book reviews. To deploy the application run the following command: kustomize build deploy/demo/bookinfo | kubectl apply -f - If all components were installed correctly you can run kubectl get pods -A to get a list of all Pods. The output should look similar to the following: NAMESPACE NAME READY STATUS RESTARTS AGE bookinfo details-v1-789f56cd8f-qwhmp 2/2 Running 0 2m10s bookinfo productpage-v1-58889757cf-75f4z 2/2 Running 0 2m10s bookinfo ratings-v1-6bb88c887c-4p7gd 2/2 Running 0 2m10s bookinfo reviews-v1-6d9cd465c6-znl5z 2/2 Running 0 2m10s bookinfo reviews-v2-5b5f79977b-gzwxh 2/2 Running 0 2m10s bookinfo reviews-v3-57cd59df96-5vtfw 2/2 Running 0 2m10s elastic-system elastic-operator-0 2/2 Running 0 8m10s elastic-system elasticsearch-es-elasticsearch-0 2/2 Running 0 7m8s elastic-system filebeat-beat-filebeat-bjd5s 1/1 Running 0 7m7s istio-operator istio-operator-86cd56f99f-g6n9k 1/1 Running 0 10m istio-system istio-ingressgateway-74fbb47646-z7nz7 1/1 Running 0 9m54s istio-system istiod-7c8d96f664-nvlgb 1/1 Running 0 10m istio-system jaeger-7f78b6fb65-mg5tz 1/1 Running 0 10m istio-system kiali-85c8cdd5b5-4r5mw 1/1 Running 0 10m istio-system prometheus-69f7f4d689-fcqmt 2/2 Running 0 10m kobs kobs-69995cbd79-6z4nl 2/2 Running 0 2m39s kube-system coredns-f9fd979d6-7gmkr 1/1 Running 0 12m kube-system coredns-f9fd979d6-7j79d 1/1 Running 0 12m kube-system etcd-kobs-demo-control-plane 1/1 Running 0 12m kube-system kindnet-55dl6 1/1 Running 0 12m kube-system kube-apiserver-kobs-demo-control-plane 1/1 Running 0 12m kube-system kube-controller-manager-kobs-demo-control-plane 1/1 Running 0 12m kube-system kube-proxy-4ppq2 1/1 Running 0 12m kube-system kube-scheduler-kobs-demo-control-plane 1/1 Running 0 12m kube-system kube-state-metrics-5f694c7886-dbvfw 1/1 Running 0 12m kube-system metrics-server-6778f49766-x88mz 1/1 Running 0 12m local-path-storage local-path-provisioner-78776bfc44-59fhc 1/1 Running 0 12m Access kobs and the Bookinfo Application If you want to access kobs and the Bookinfo Application via your browser, you have to add the following entries to your /etc/hosts file: 127.0.0.1 kobs.demo 127.0.0.1 bookinfo.demo After you have adjusted the hosts file, you can open http://bookinfo.demo/productpage in your browser. You should see the productpage for the Bookinfo Application. When you refresh the page, the reviews section of the page should change with every request. To generate some traffic to get more metrics, logs and traces you can run the following command in your terminal: while : ; do curl -s \"http://bookinfo.demo/productpage\" | grep -o \"<title>.*</title>\" ; sleep 1 ; done Now you can take a look at kobs. Open http://kobs.demo to view the kobs frontend. You should see the home page with the five items: Applications: Is the section to view all applications, which are define via the Application CRD. Resources: Can be used to view all Kubernetes resources, like Deployments, Pods, StatefulSets and Custom Resources. Prometheus: Is the page for the Prometheus plugin, which can be used to directly query the configured Prometheus instance. Elasticsearch: Can be used to retrieve the logs of the Pods via the Elasticsearch plugin. Jaeger: View the traces of the Bookinfo Application via the Jaeger plugin. Let's focus on the Applications section for this demo. When you select the bookinfo namespace you should see four applications: details , productpage , rating and reviews . You can click on the links to view the corresponding Application CR. Cleanup To delete the created Kubernetes cluster and the local Docker registry, when you are done with the demo, you can run the following commands. This will delete the kind cluster and the Docker container for the local Docker registry: kind delete cluster --name kobs-demo docker stop kind-registry docker rm kind-registry","title":"Demo"},{"location":"installation/demo/#demo","text":"The kobs demo can be used to try out the kobs. Within the demo you will deploy Istio via the Istio Operator , Prometheus , Elasticsearch , Jaeger , Kiali and the Bookinfo Application .","title":"Demo"},{"location":"installation/demo/#create-a-kubernetes-cluster-using-kind","text":"The demo uses kind to create a local Kubernetes cluster, to deploy the mentioned services. Note If you are using minikube , please check the minikube and Istio documentation to expose kobs and the Bookinfo Application to access them via your browser. To create a Kubernetes cluster using kind your can run the kind-with-registry.sh script. The script will create a kind cluster with one node, configures a local Docker registry and sets the correct port mappings, so that you can access kobs via your browser later. deploy/demo/kind-with-registry.sh When your cluster is ready, you should see the following message: Creating cluster \"kobs-demo\" ... \u2713 Ensuring node image (kindest/node:v1.19.1) \ud83d\uddbc \u2713 Preparing nodes \ud83d\udce6 \u2713 Writing configuration \ud83d\udcdc \u2713 Starting control-plane \ud83d\udd79\ufe0f \u2713 Installing CNI \ud83d\udd0c \u2713 Installing StorageClass \ud83d\udcbe Set kubectl context to \"kind-kobs-demo\" You can now use your cluster with: kubectl cluster-info --context kind-kobs-demo To use the cluster you can switch your kubectl context using kubectl cluster-info --context kind-kobs-demo .","title":"Create a Kubernetes Cluster using Kind"},{"location":"installation/demo/#install-all-services","text":"Now we can deploy all the CRDs for kobs, the metrics-server and the kube-state-metrics : kustomize build deploy/kustomize/crds | kubectl apply -f - kustomize build deploy/demo/kube-system | kubectl apply -f - Now we can deploy all resources for the istio-operator and istio-system namespace. We are using Istio to get some nice Prometheus metrics for the Bookinfo Application and for the integration with Jaeger to get some traces. To install the Operator and Istio run the following commands, this will also deploy Prometheus, Jaeger and Kiali in the istio-system namespace: kustomize build deploy/demo/istio-operator | kubectl apply -f - kustomize build deploy/demo/istio-system | kubectl apply -f - When Istio is up and running, we can install Elasticsearch and Filebeat to collect the logs for the Bookinfo Application and kobs to have all our observability tools in one UI: kustomize build deploy/demo/elastic-system | kubectl apply -f - kustomize build deploy/demo/kobs/main | kubectl apply -f - The above commands are also installing kobs, with the incluster provider and the correct configuration for the Prometheus, Elasticsearch and Jaeger plugin. The complete configuration file looks as follows: clusters : providers : - provider : incluster incluster : name : kobs-demo plugins : prometheus : - name : prometheus displayName : Prometheus description : \"From metrics to insight: Power your metrics and alerting with a leading open-source monitoring solution.\" address : http://prometheus.istio-system.svc.cluster.local:9090 elasticsearch : - name : elasticsearch displayName : Elasticsearch description : \"A distributed, RESTful search and analytics engine capable of addressing a growing number of use cases.\" address : http://elasticsearch-es-http.elastic-system.svc.cluster.local:9200 jaeger : - name : jaeger displayName : Jaeger description : \"Open-source, end-to-end distributed tracing: Monitor and troubleshoot transactions in complex distributed systems\" address : http://tracing.istio-system.svc.cluster.local:80/jaeger The last step, befor you can explore the functions of kobs, is to install the Bookinfo Application. The application displays information about a book, similar to a single catalog entry of an online book store. Displayed on the page is a description of the book, book details (ISBN, number of pages, and so on), and a few book reviews. To deploy the application run the following command: kustomize build deploy/demo/bookinfo | kubectl apply -f - If all components were installed correctly you can run kubectl get pods -A to get a list of all Pods. The output should look similar to the following: NAMESPACE NAME READY STATUS RESTARTS AGE bookinfo details-v1-789f56cd8f-qwhmp 2/2 Running 0 2m10s bookinfo productpage-v1-58889757cf-75f4z 2/2 Running 0 2m10s bookinfo ratings-v1-6bb88c887c-4p7gd 2/2 Running 0 2m10s bookinfo reviews-v1-6d9cd465c6-znl5z 2/2 Running 0 2m10s bookinfo reviews-v2-5b5f79977b-gzwxh 2/2 Running 0 2m10s bookinfo reviews-v3-57cd59df96-5vtfw 2/2 Running 0 2m10s elastic-system elastic-operator-0 2/2 Running 0 8m10s elastic-system elasticsearch-es-elasticsearch-0 2/2 Running 0 7m8s elastic-system filebeat-beat-filebeat-bjd5s 1/1 Running 0 7m7s istio-operator istio-operator-86cd56f99f-g6n9k 1/1 Running 0 10m istio-system istio-ingressgateway-74fbb47646-z7nz7 1/1 Running 0 9m54s istio-system istiod-7c8d96f664-nvlgb 1/1 Running 0 10m istio-system jaeger-7f78b6fb65-mg5tz 1/1 Running 0 10m istio-system kiali-85c8cdd5b5-4r5mw 1/1 Running 0 10m istio-system prometheus-69f7f4d689-fcqmt 2/2 Running 0 10m kobs kobs-69995cbd79-6z4nl 2/2 Running 0 2m39s kube-system coredns-f9fd979d6-7gmkr 1/1 Running 0 12m kube-system coredns-f9fd979d6-7j79d 1/1 Running 0 12m kube-system etcd-kobs-demo-control-plane 1/1 Running 0 12m kube-system kindnet-55dl6 1/1 Running 0 12m kube-system kube-apiserver-kobs-demo-control-plane 1/1 Running 0 12m kube-system kube-controller-manager-kobs-demo-control-plane 1/1 Running 0 12m kube-system kube-proxy-4ppq2 1/1 Running 0 12m kube-system kube-scheduler-kobs-demo-control-plane 1/1 Running 0 12m kube-system kube-state-metrics-5f694c7886-dbvfw 1/1 Running 0 12m kube-system metrics-server-6778f49766-x88mz 1/1 Running 0 12m local-path-storage local-path-provisioner-78776bfc44-59fhc 1/1 Running 0 12m","title":"Install all Services"},{"location":"installation/demo/#access-kobs-and-the-bookinfo-application","text":"If you want to access kobs and the Bookinfo Application via your browser, you have to add the following entries to your /etc/hosts file: 127.0.0.1 kobs.demo 127.0.0.1 bookinfo.demo After you have adjusted the hosts file, you can open http://bookinfo.demo/productpage in your browser. You should see the productpage for the Bookinfo Application. When you refresh the page, the reviews section of the page should change with every request. To generate some traffic to get more metrics, logs and traces you can run the following command in your terminal: while : ; do curl -s \"http://bookinfo.demo/productpage\" | grep -o \"<title>.*</title>\" ; sleep 1 ; done Now you can take a look at kobs. Open http://kobs.demo to view the kobs frontend. You should see the home page with the five items: Applications: Is the section to view all applications, which are define via the Application CRD. Resources: Can be used to view all Kubernetes resources, like Deployments, Pods, StatefulSets and Custom Resources. Prometheus: Is the page for the Prometheus plugin, which can be used to directly query the configured Prometheus instance. Elasticsearch: Can be used to retrieve the logs of the Pods via the Elasticsearch plugin. Jaeger: View the traces of the Bookinfo Application via the Jaeger plugin. Let's focus on the Applications section for this demo. When you select the bookinfo namespace you should see four applications: details , productpage , rating and reviews . You can click on the links to view the corresponding Application CR.","title":"Access kobs and the Bookinfo Application"},{"location":"installation/demo/#cleanup","text":"To delete the created Kubernetes cluster and the local Docker registry, when you are done with the demo, you can run the following commands. This will delete the kind cluster and the Docker container for the local Docker registry: kind delete cluster --name kobs-demo docker stop kind-registry docker rm kind-registry","title":"Cleanup"},{"location":"installation/helm/","text":"Helm Helm is the package manager for Kubernetes, and you can read detailed background information in the CNCF Helm Project Journey report . Install the Helm Chart To install kobs using Helm you have to add our Helm repository: helm repo add kobs https://helm.kobs.io helm repo list When you have added the Helm repository, you can install kobs: helm install kobs kobs/kobs When the installation was successful you shoud see a message like the following: NAME: kobs LAST DEPLOYED: Fri Apr 2 21:48:11 2021 NAMESPACE: default STATUS: deployed REVISION: 1 NOTES: Visit https://kobs.io for more information. Update the Helm Chart To update the Helm repository and to show all available versions of the Helm chart, you can run the following commands: helm repo update helm search repo -l kobs/ To update your deployed Helm chart run: helm upgrade kobs kobs/kobs Values Value Description Default nameOverride Expand the name of the chart. \"\" fullnameOverride Override the name of the app. \"\" replicas Number of replicas for the kobs Deployment. 1 imagePullSecrets Specify a list of image pull secrets, to avoid the DockerHub rate limit or to pull the kobs/enovy image from a private registry. [] podSecurityContext Specify security settings for the created Pods. To set the security settings for the kobs or envoy Container use the corresponding securityContext field. {} nodeSelector Specify a map of key-value pairs, to assign the Pods to a specific set of nodes. {} tolerations Specify the tolerations for the kobs Pods. [] affinity Specify a node affinity or inter-pod affinity / anti-affinity for an advanced scheduling of the kobs Pods. {} kobs.image.repository The repository for the Docker image. kobsio/kobs kobs.image.tag The tag of the Docker image which should be used. v0.5.0 kobs.image.pullPolicy The image pull policy for the Docker image. IfNotPresent kobs.annotations Specify additional annotations for the created Pods. {} kobs.labels Specify additional labels for the created Pods. {} kobs.securityContext Specify security settings for the kobs Container. They override settings made at the Pod level via the podSecurityContext when there is overlap. {} kobs.resources Set cpu and memory requests and limits for the kobs container. {} kobs.env Set additional environment variables for the kobs container. [] kobs.settings.clustersCacheDurationNamespaces The duration for how long the list of namespaces for each cluster should be cached. 5m kobs.settings.logFormat Set the output format of the logs. Must be plain or json . plain kobs.settings.logLevel Set the log level. Must be trace , debug , info , warn , error , fatal or panic . info kobs.config Content of the config.yaml file, which is loaded during the start of kobs and contains the configuration. istio.virtualService.create Specifies whether a VirtualService should be created. false istio.virtualService.gateways A list of gateways for the VirtualService. [] istio.virtualService.hosts A list of hosts for the VirtualService. [] istio.virtualService.timeout Timeout for gRPC requests. 300s istio.virtualService.additionalRoutes A list of additional routes for the VirtualService. [] serviceAccount.create Specifies whether a service account should be created. true serviceAccount.annotations Annotations to add to the service account. {} serviceAccount.name The name of the service account to use. If not set and create is true, a name is generated using the fullname template \"\" rbac.create Specifies whether a cluster role and cluster role binding should be created. true rbac.name The name of the cluster role and cluster role binding to use. If not set and create is true, a name is generated using the fullname template. \"\" service.type Set the type for the created Service: ClusterIP , NodePort , LoadBalancer . ClusterIP service.annotations Specify additional annotations for the created Service. {} service.labels Specify additional labels for the created Service. {} ingress.enabled Create an Ingress to expose kobs. false ingress.annotations Annotations to add to the ingress. {} ingress.hosts Hosts to use for the ingress. [] ingress.tls TLS configuration for the ingress. [] serviceMonitor.enabled Create a Service Monitor for kobs. false serviceMonitor.interval Interval at which metrics should be scraped. Fallback to the Prometheus default unless specified. serviceMonitor.scrapeTimeout Timeout after which the scrape is ended. Fallback to the Prometheus default unless specified. serviceMonitor.labels Additional labels for the the Service Monitor. {} serviceMonitor.honorLabels Chooses the metric's labels on collisions with target labels. false serviceMonitor.metricRelabelings Metric relabel config. [] serviceMonitor.relabelings Relabel config. []","title":"Helm"},{"location":"installation/helm/#helm","text":"Helm is the package manager for Kubernetes, and you can read detailed background information in the CNCF Helm Project Journey report .","title":"Helm"},{"location":"installation/helm/#install-the-helm-chart","text":"To install kobs using Helm you have to add our Helm repository: helm repo add kobs https://helm.kobs.io helm repo list When you have added the Helm repository, you can install kobs: helm install kobs kobs/kobs When the installation was successful you shoud see a message like the following: NAME: kobs LAST DEPLOYED: Fri Apr 2 21:48:11 2021 NAMESPACE: default STATUS: deployed REVISION: 1 NOTES: Visit https://kobs.io for more information.","title":"Install the Helm Chart"},{"location":"installation/helm/#update-the-helm-chart","text":"To update the Helm repository and to show all available versions of the Helm chart, you can run the following commands: helm repo update helm search repo -l kobs/ To update your deployed Helm chart run: helm upgrade kobs kobs/kobs","title":"Update the Helm Chart"},{"location":"installation/helm/#values","text":"Value Description Default nameOverride Expand the name of the chart. \"\" fullnameOverride Override the name of the app. \"\" replicas Number of replicas for the kobs Deployment. 1 imagePullSecrets Specify a list of image pull secrets, to avoid the DockerHub rate limit or to pull the kobs/enovy image from a private registry. [] podSecurityContext Specify security settings for the created Pods. To set the security settings for the kobs or envoy Container use the corresponding securityContext field. {} nodeSelector Specify a map of key-value pairs, to assign the Pods to a specific set of nodes. {} tolerations Specify the tolerations for the kobs Pods. [] affinity Specify a node affinity or inter-pod affinity / anti-affinity for an advanced scheduling of the kobs Pods. {} kobs.image.repository The repository for the Docker image. kobsio/kobs kobs.image.tag The tag of the Docker image which should be used. v0.5.0 kobs.image.pullPolicy The image pull policy for the Docker image. IfNotPresent kobs.annotations Specify additional annotations for the created Pods. {} kobs.labels Specify additional labels for the created Pods. {} kobs.securityContext Specify security settings for the kobs Container. They override settings made at the Pod level via the podSecurityContext when there is overlap. {} kobs.resources Set cpu and memory requests and limits for the kobs container. {} kobs.env Set additional environment variables for the kobs container. [] kobs.settings.clustersCacheDurationNamespaces The duration for how long the list of namespaces for each cluster should be cached. 5m kobs.settings.logFormat Set the output format of the logs. Must be plain or json . plain kobs.settings.logLevel Set the log level. Must be trace , debug , info , warn , error , fatal or panic . info kobs.config Content of the config.yaml file, which is loaded during the start of kobs and contains the configuration. istio.virtualService.create Specifies whether a VirtualService should be created. false istio.virtualService.gateways A list of gateways for the VirtualService. [] istio.virtualService.hosts A list of hosts for the VirtualService. [] istio.virtualService.timeout Timeout for gRPC requests. 300s istio.virtualService.additionalRoutes A list of additional routes for the VirtualService. [] serviceAccount.create Specifies whether a service account should be created. true serviceAccount.annotations Annotations to add to the service account. {} serviceAccount.name The name of the service account to use. If not set and create is true, a name is generated using the fullname template \"\" rbac.create Specifies whether a cluster role and cluster role binding should be created. true rbac.name The name of the cluster role and cluster role binding to use. If not set and create is true, a name is generated using the fullname template. \"\" service.type Set the type for the created Service: ClusterIP , NodePort , LoadBalancer . ClusterIP service.annotations Specify additional annotations for the created Service. {} service.labels Specify additional labels for the created Service. {} ingress.enabled Create an Ingress to expose kobs. false ingress.annotations Annotations to add to the ingress. {} ingress.hosts Hosts to use for the ingress. [] ingress.tls TLS configuration for the ingress. [] serviceMonitor.enabled Create a Service Monitor for kobs. false serviceMonitor.interval Interval at which metrics should be scraped. Fallback to the Prometheus default unless specified. serviceMonitor.scrapeTimeout Timeout after which the scrape is ended. Fallback to the Prometheus default unless specified. serviceMonitor.labels Additional labels for the the Service Monitor. {} serviceMonitor.honorLabels Chooses the metric's labels on collisions with target labels. false serviceMonitor.metricRelabelings Metric relabel config. [] serviceMonitor.relabelings Relabel config. []","title":"Values"},{"location":"installation/kustomize/","text":"Kustomize Kustomize introduces a template-free way to customize application configuration that simplifies the use of off-the-shelf applications. To install kobs using Kustomize your can run the following command: kubectl create namespace kobs kustomize build github.com/kobsio/kobs/deploy/kustomize | kubectl apply -f -","title":"Kustomize"},{"location":"installation/kustomize/#kustomize","text":"Kustomize introduces a template-free way to customize application configuration that simplifies the use of off-the-shelf applications. To install kobs using Kustomize your can run the following command: kubectl create namespace kobs kustomize build github.com/kobsio/kobs/deploy/kustomize | kubectl apply -f -","title":"Kustomize"},{"location":"plugins/applications/","text":"Applications The applications plugin allows you to show a list of application on a dashboard. More information can be found on the Applications Page . Options Field Type Description Required view string The view, which should be used to show the applications. This must be gallery or topology . The default will be gallery . No clusters []string A list of clusters. If this value isn't provided, it will be the cluster from the team or application where the dashboard is used. No namespaces []string A list of namespaces. If this value isn't provided, it will be the namespace from the team or application where the dashboard is used. No team Team Get the applications for a team instead of clusters and namespaces. No Team It is also possible to show all applications for a team. If a team is provided the clusters and namespaces from above are ignored. Field Type Description Required cluster string The cluster of the team. No namespace string The namespace of the team. No name string The name of the team. Yes Examples The following dashboard contains two panels for application, one shows the applications in the gallery view and the other one in the topology view. --- apiVersion : kobs.io/v1beta1 kind : Dashboard spec : description : Resources for an Application placeholders : - name : namespace description : Namespace for the Application variables : - name : cluster label : Cluster plugin : name : core options : type : clusters rows : - size : 4 panels : - title : Applications colSpan : 6 plugin : name : applications options : view : gallery clusters : - \"{% .cluster %}\" namespaces : - \"{{ .namespace }}\" - title : Applications Topology colSpan : 6 plugin : name : applications options : view : topology clusters : - \"{% .cluster %}\" namespaces : - \"{{ .namespace }}\" The following example shows all applications for team-diablo . --- apiVersion : kobs.io/v1beta1 kind : Dashboard spec : rows : - panels : - title : Applications for Team Diablo plugin : name : applications options : view : gallery team : namespace : kobs name : team-diablo","title":"Applications"},{"location":"plugins/applications/#applications","text":"The applications plugin allows you to show a list of application on a dashboard. More information can be found on the Applications Page .","title":"Applications"},{"location":"plugins/applications/#options","text":"Field Type Description Required view string The view, which should be used to show the applications. This must be gallery or topology . The default will be gallery . No clusters []string A list of clusters. If this value isn't provided, it will be the cluster from the team or application where the dashboard is used. No namespaces []string A list of namespaces. If this value isn't provided, it will be the namespace from the team or application where the dashboard is used. No team Team Get the applications for a team instead of clusters and namespaces. No","title":"Options"},{"location":"plugins/applications/#team","text":"It is also possible to show all applications for a team. If a team is provided the clusters and namespaces from above are ignored. Field Type Description Required cluster string The cluster of the team. No namespace string The namespace of the team. No name string The name of the team. Yes","title":"Team"},{"location":"plugins/applications/#examples","text":"The following dashboard contains two panels for application, one shows the applications in the gallery view and the other one in the topology view. --- apiVersion : kobs.io/v1beta1 kind : Dashboard spec : description : Resources for an Application placeholders : - name : namespace description : Namespace for the Application variables : - name : cluster label : Cluster plugin : name : core options : type : clusters rows : - size : 4 panels : - title : Applications colSpan : 6 plugin : name : applications options : view : gallery clusters : - \"{% .cluster %}\" namespaces : - \"{{ .namespace }}\" - title : Applications Topology colSpan : 6 plugin : name : applications options : view : topology clusters : - \"{% .cluster %}\" namespaces : - \"{{ .namespace }}\" The following example shows all applications for team-diablo . --- apiVersion : kobs.io/v1beta1 kind : Dashboard spec : rows : - panels : - title : Applications for Team Diablo plugin : name : applications options : view : gallery team : namespace : kobs name : team-diablo","title":"Examples"},{"location":"plugins/dashboards/","text":"Dashboards The dashboards plugin allows you to show a list of dashboards. Options The options for the dashboards plugin is a list of objects with the following properties: Field Type Description Required cluster string Cluster of the dashboard. If this field is omitted kobs will look in the same cluster as the application was created in. No namespace string Namespace of the dashboard. If this field is omitted kobs will look in the same namespace as the application was created in. No name string Name of the dashboard. Yes title string Title for the dashboard Yes description string The description can be used to explain the content of the dashboard. No placeholders map A map of placeholders, whith the name as key and the value for the placeholder as value. More information for placeholders can be found in the documentation for Dashboards . No Example --- apiVersion : kobs.io/v1beta1 kind : Dashboard spec : rows : - panels : - title : Dashboards plugin : name : dashboards options : - name : resources namespace : kobs title : Resources in the bookinfo namespace placeholders : namespace : bookinfo - name : resource-usage namespace : kobs title : Resource Usage placeholders : namespace : bookinfo pod : \".*\"","title":"Dashboards"},{"location":"plugins/dashboards/#dashboards","text":"The dashboards plugin allows you to show a list of dashboards.","title":"Dashboards"},{"location":"plugins/dashboards/#options","text":"The options for the dashboards plugin is a list of objects with the following properties: Field Type Description Required cluster string Cluster of the dashboard. If this field is omitted kobs will look in the same cluster as the application was created in. No namespace string Namespace of the dashboard. If this field is omitted kobs will look in the same namespace as the application was created in. No name string Name of the dashboard. Yes title string Title for the dashboard Yes description string The description can be used to explain the content of the dashboard. No placeholders map A map of placeholders, whith the name as key and the value for the placeholder as value. More information for placeholders can be found in the documentation for Dashboards . No","title":"Options"},{"location":"plugins/dashboards/#example","text":"--- apiVersion : kobs.io/v1beta1 kind : Dashboard spec : rows : - panels : - title : Dashboards plugin : name : dashboards options : - name : resources namespace : kobs title : Resources in the bookinfo namespace placeholders : namespace : bookinfo - name : resource-usage namespace : kobs title : Resource Usage placeholders : namespace : bookinfo pod : \".*\"","title":"Example"},{"location":"plugins/elasticsearch/","text":"Elasticsearch The Elasticsearch plugin can be used to retrieve logs from a configured Elasticsearch instance. You can specify a query, which is used to retireve all documents from Elasticsearch. You can also select a list of fields, to display the results in a table. From this table you can also select a single document to view the complete json representation of this document. Options The following options can be used for a panel with the Elasticsearch plugin: Field Type Description Required query string The Elasticsearch query. We are using the Query String Syntax for Elasticsearch. Yes fields []string A list of fields to display in the results table. If this field is omitted, the whole document is displayed in the results table. No showChart boolean If this is true the chart with the distribution of the Documents over the selected time range will be shown No --- apiVersion : kobs.io/v1beta1 kind : Dashboard spec : placeholders : - name : namespace description : The workload namespace - name : app description : The workloads app label rows : - size : -1 panels : - title : Istio Logs colSpan : 12 plugin : name : elasticsearch options : query : \"kubernetes.namespace: {{ .namespace }} AND kubernetes.labels.app: {{ .app }} AND kubernetes.container.name: istio-proxy AND _exists_: content.method\" fields : - \"kubernetes.pod.name\" - \"content.authority\" - \"content.route_name\" - \"content.protocol\" - \"content.method\" - \"content.path\" - \"content.response_code\" - \"content.upstream_service_time\" - \"content.bytes_received\" - \"content.bytes_sent\" showChart : true Query String Syntax The Elasticsearch plugins uses the query string syntax for filtering log lines. Field Names You can specify fields to search in the query syntax: where the status field contains active status:active where the title field contains quick or brown title:(quick OR brown) where the author field contains the exact phrase \"john smith\" author:\"John Smith\" where the first name field contains Alice (note how we need to escape the space with a backslash) first\\ name:Alice where any of the fields book.title , book.content or book.date contains quick or brown (note how we need to escape the * with a backslash): book.\\*:(quick OR brown) where the field title has any non-null value: _exists_:title Wildcards Wildcard searches can be run on individual terms, using ? to replace a single character, and * to replace zero or more characters: qu?ck bro* Regular Expressions Regular expression patterns can be embedded in the query string by wrapping them in forward-slashes ( \"/\" ): name:/joh?n(ath[oa]n)/ Fuzziness We can search for terms that are similar to, but not exactly like our search terms, using the \"fuzzy\" operator: quikc~ brwn~ foks~ Ranges Ranges can be specified for date, numeric or string fields. Inclusive ranges are specified with square brackets [min TO max] and exclusive ranges with curly brackets {min TO max} . All days in 2012: date:[2012-01-01 TO 2012-12-31] Numbers 1..5 count:[1 TO 5] Tags between alpha and omega , excluding alpha and omega : tag:{alpha TO omega} Numbers from 10 upwards count:[10 TO *] Dates before 2012 date:{* TO 2012-01-01} Boolean operators By default, all terms are optional, as long as one term matches. A search for foo bar baz will find any document that contains one or more of foo or bar or baz . We have already discussed the default_operator above which allows you to force all terms to be required, but there are also boolean operators which can be used in the query string itself to provide more control. The preferred operators are + (this term must be present) and - (this term must not be present). All other terms are optional. For example, this query: quick brown +fox -news Grouping Multiple terms or clauses can be grouped together with parentheses, to form sub-queries: (quick OR brown) AND fox","title":"Elasticsearch"},{"location":"plugins/elasticsearch/#elasticsearch","text":"The Elasticsearch plugin can be used to retrieve logs from a configured Elasticsearch instance. You can specify a query, which is used to retireve all documents from Elasticsearch. You can also select a list of fields, to display the results in a table. From this table you can also select a single document to view the complete json representation of this document.","title":"Elasticsearch"},{"location":"plugins/elasticsearch/#options","text":"The following options can be used for a panel with the Elasticsearch plugin: Field Type Description Required query string The Elasticsearch query. We are using the Query String Syntax for Elasticsearch. Yes fields []string A list of fields to display in the results table. If this field is omitted, the whole document is displayed in the results table. No showChart boolean If this is true the chart with the distribution of the Documents over the selected time range will be shown No --- apiVersion : kobs.io/v1beta1 kind : Dashboard spec : placeholders : - name : namespace description : The workload namespace - name : app description : The workloads app label rows : - size : -1 panels : - title : Istio Logs colSpan : 12 plugin : name : elasticsearch options : query : \"kubernetes.namespace: {{ .namespace }} AND kubernetes.labels.app: {{ .app }} AND kubernetes.container.name: istio-proxy AND _exists_: content.method\" fields : - \"kubernetes.pod.name\" - \"content.authority\" - \"content.route_name\" - \"content.protocol\" - \"content.method\" - \"content.path\" - \"content.response_code\" - \"content.upstream_service_time\" - \"content.bytes_received\" - \"content.bytes_sent\" showChart : true","title":"Options"},{"location":"plugins/elasticsearch/#query-string-syntax","text":"The Elasticsearch plugins uses the query string syntax for filtering log lines.","title":"Query String Syntax"},{"location":"plugins/elasticsearch/#field-names","text":"You can specify fields to search in the query syntax: where the status field contains active status:active where the title field contains quick or brown title:(quick OR brown) where the author field contains the exact phrase \"john smith\" author:\"John Smith\" where the first name field contains Alice (note how we need to escape the space with a backslash) first\\ name:Alice where any of the fields book.title , book.content or book.date contains quick or brown (note how we need to escape the * with a backslash): book.\\*:(quick OR brown) where the field title has any non-null value: _exists_:title","title":"Field Names"},{"location":"plugins/elasticsearch/#wildcards","text":"Wildcard searches can be run on individual terms, using ? to replace a single character, and * to replace zero or more characters: qu?ck bro*","title":"Wildcards"},{"location":"plugins/elasticsearch/#regular-expressions","text":"Regular expression patterns can be embedded in the query string by wrapping them in forward-slashes ( \"/\" ): name:/joh?n(ath[oa]n)/","title":"Regular Expressions"},{"location":"plugins/elasticsearch/#fuzziness","text":"We can search for terms that are similar to, but not exactly like our search terms, using the \"fuzzy\" operator: quikc~ brwn~ foks~","title":"Fuzziness"},{"location":"plugins/elasticsearch/#ranges","text":"Ranges can be specified for date, numeric or string fields. Inclusive ranges are specified with square brackets [min TO max] and exclusive ranges with curly brackets {min TO max} . All days in 2012: date:[2012-01-01 TO 2012-12-31] Numbers 1..5 count:[1 TO 5] Tags between alpha and omega , excluding alpha and omega : tag:{alpha TO omega} Numbers from 10 upwards count:[10 TO *] Dates before 2012 date:{* TO 2012-01-01}","title":"Ranges"},{"location":"plugins/elasticsearch/#boolean-operators","text":"By default, all terms are optional, as long as one term matches. A search for foo bar baz will find any document that contains one or more of foo or bar or baz . We have already discussed the default_operator above which allows you to force all terms to be required, but there are also boolean operators which can be used in the query string itself to provide more control. The preferred operators are + (this term must be present) and - (this term must not be present). All other terms are optional. For example, this query: quick brown +fox -news","title":"Boolean operators"},{"location":"plugins/elasticsearch/#grouping","text":"Multiple terms or clauses can be grouped together with parentheses, to form sub-queries: (quick OR brown) AND fox","title":"Grouping"},{"location":"plugins/getting-started/","text":"Getting Started Plugins can be used to extend the functionality of kobs. For example you can use Prometheus to display metrics, Elasticsearch to display logs or Jaeger to display traces for your application within kobs. All the configured plugins can be found on the home page of kobs. From this page you can use the configured plugins directly. Specification Plugins can also be used as preview for an application or within a dashboard panel: Field Type Description Required name string The name of the plugin as it is defined in the configuration file . Or one of the special values applications , dashboards , resources or dashboards for these core plugins. Yes options any Plugin specific options as they are defined at the plugins page (e.g. PromQL query). Yes Community Plugins","title":"Getting Started"},{"location":"plugins/getting-started/#getting-started","text":"Plugins can be used to extend the functionality of kobs. For example you can use Prometheus to display metrics, Elasticsearch to display logs or Jaeger to display traces for your application within kobs. All the configured plugins can be found on the home page of kobs. From this page you can use the configured plugins directly.","title":"Getting Started"},{"location":"plugins/getting-started/#specification","text":"Plugins can also be used as preview for an application or within a dashboard panel: Field Type Description Required name string The name of the plugin as it is defined in the configuration file . Or one of the special values applications , dashboards , resources or dashboards for these core plugins. Yes options any Plugin specific options as they are defined at the plugins page (e.g. PromQL query). Yes","title":"Specification"},{"location":"plugins/getting-started/#community-plugins","text":"","title":"Community Plugins"},{"location":"plugins/jaeger/","text":"Jaeger The Jaeger plugin can be used to retrieve traces from a configured Jaeger instance. You can specify the service, operation and tags for which you want to retrieve traces. You can also view the details of a trace and compare it with another trace. Options The following options can be used for a panel with the Jaeger plugin: Field Type Description Required limit string The maximum number of traces which should be shown. The default value is 20 . No maxDuration string The maximum duration for the retrieved traces (e.g. 1s ). No minDuration string The minimum duration for the retrieved traces (e.g. 100ms ). No service string The service to retrieve traces for. Yes operation string An optional operation to retrieve traces for. No tags string Tags, which the traces must be contain. No showChart boolean If this is true the chart with the traces will be shown. No For example the following dashboard shows all traces for the specified service (e.g. reviews.bookinfo ). --- apiVersion : kobs.io/v1beta1 kind : Dashboard spec : placeholders : - name : service description : The service name rows : - size : -1 panels : - title : Traces colSpan : 12 plugin : name : jaeger options : service : \"{{ .service }}\" showChart : true","title":"Jaeger"},{"location":"plugins/jaeger/#jaeger","text":"The Jaeger plugin can be used to retrieve traces from a configured Jaeger instance. You can specify the service, operation and tags for which you want to retrieve traces. You can also view the details of a trace and compare it with another trace.","title":"Jaeger"},{"location":"plugins/jaeger/#options","text":"The following options can be used for a panel with the Jaeger plugin: Field Type Description Required limit string The maximum number of traces which should be shown. The default value is 20 . No maxDuration string The maximum duration for the retrieved traces (e.g. 1s ). No minDuration string The minimum duration for the retrieved traces (e.g. 100ms ). No service string The service to retrieve traces for. Yes operation string An optional operation to retrieve traces for. No tags string Tags, which the traces must be contain. No showChart boolean If this is true the chart with the traces will be shown. No For example the following dashboard shows all traces for the specified service (e.g. reviews.bookinfo ). --- apiVersion : kobs.io/v1beta1 kind : Dashboard spec : placeholders : - name : service description : The service name rows : - size : -1 panels : - title : Traces colSpan : 12 plugin : name : jaeger options : service : \"{{ .service }}\" showChart : true","title":"Options"},{"location":"plugins/kiali/","text":"Kiali The Kiali plugin can be used to visualize your Istio service mesh within kobs. Note The Kiali plugin is currently under development, so that it only supports displaying the topology graph from Kiali. In the future we also want to display the charts for the traffic metrics. Options The following options can be used for a panel with the Kiali plugin: Field Type Description Required namespaces string A list of namespaces for which the topology graph should be shown. Yes","title":"Kiali"},{"location":"plugins/kiali/#kiali","text":"The Kiali plugin can be used to visualize your Istio service mesh within kobs. Note The Kiali plugin is currently under development, so that it only supports displaying the topology graph from Kiali. In the future we also want to display the charts for the traffic metrics.","title":"Kiali"},{"location":"plugins/kiali/#options","text":"The following options can be used for a panel with the Kiali plugin: Field Type Description Required namespaces string A list of namespaces for which the topology graph should be shown. Yes","title":"Options"},{"location":"plugins/markdown/","text":"Markdown The markdown plugin can be used to show a markdown formatted text on a dashboard. Options The following options can be used for a panel with the markdown plugin: Field Type Description Required text string The markdown formatted text, which is shown within a panel. Yes --- apiVersion : kobs.io/v1beta1 kind : Dashboard spec : rows : - size : -1 panels : - title : Bookinfo Documentation plugin : name : markdown options : text : | The application displays information about a book, similar to a single catalog entry of an online book store. Displayed on the page is a description of the book, book details (ISBN, number of pages, and so on), and a few book reviews. The Bookinfo application is broken into four separate microservices: * `productpage`. The `productpage` microservice calls the `details` and `reviews` microservices to populate the page. * `details`. The `details` microservice contains book information. * `reviews`. The `reviews` microservice contains book reviews. It also calls the `ratings` microservice. * `ratings`. The `ratings` microservice contains book ranking information that accompanies a book review. There are 3 versions of the `reviews` microservice: * Version v1 doesn't call the `ratings` service. * Version v2 calls the `ratings` service, and displays each rating as 1 to 5 black stars. * Version v3 calls the `ratings` service, and displays each rating as 1 to 5 red stars. The end-to-end architecture of the application is shown below. ![Bookinfo Application without Istio](https://istio.io/latest/docs/examples/bookinfo/noistio.svg) This application is polyglot, i.e., the microservices are written in different languages. It\u2019s worth noting that these services have no dependencies on Istio, but make an interesting service mesh example, particularly because of the multitude of services, languages and versions for the `reviews` service.","title":"Markdown"},{"location":"plugins/markdown/#markdown","text":"The markdown plugin can be used to show a markdown formatted text on a dashboard.","title":"Markdown"},{"location":"plugins/markdown/#options","text":"The following options can be used for a panel with the markdown plugin: Field Type Description Required text string The markdown formatted text, which is shown within a panel. Yes --- apiVersion : kobs.io/v1beta1 kind : Dashboard spec : rows : - size : -1 panels : - title : Bookinfo Documentation plugin : name : markdown options : text : | The application displays information about a book, similar to a single catalog entry of an online book store. Displayed on the page is a description of the book, book details (ISBN, number of pages, and so on), and a few book reviews. The Bookinfo application is broken into four separate microservices: * `productpage`. The `productpage` microservice calls the `details` and `reviews` microservices to populate the page. * `details`. The `details` microservice contains book information. * `reviews`. The `reviews` microservice contains book reviews. It also calls the `ratings` microservice. * `ratings`. The `ratings` microservice contains book ranking information that accompanies a book review. There are 3 versions of the `reviews` microservice: * Version v1 doesn't call the `ratings` service. * Version v2 calls the `ratings` service, and displays each rating as 1 to 5 black stars. * Version v3 calls the `ratings` service, and displays each rating as 1 to 5 red stars. The end-to-end architecture of the application is shown below. ![Bookinfo Application without Istio](https://istio.io/latest/docs/examples/bookinfo/noistio.svg) This application is polyglot, i.e., the microservices are written in different languages. It\u2019s worth noting that these services have no dependencies on Istio, but make an interesting service mesh example, particularly because of the multitude of services, languages and versions for the `reviews` service.","title":"Options"},{"location":"plugins/opsgenie/","text":"Opsgenie The Opsgenie plugin can be used to retrieve alerts and incidents from Opsgenie. Options The following options can be used for a panel with the Opsgenie plugin: Field Type Description Required type string Specify if you want to show alerts or incidents . The default value is alerts . No query string The Opsgenie query. The documentation for the query language can be found in the Opsgenie Documentation . No For example the following dashboard shows all open alerts and incidents. --- apiVersion : kobs.io/v1beta1 kind : Dashboard spec : rows : - size : -1 panels : - title : Alerts colSpan : 6 plugin : name : opsgenie options : type : alerts query : \"status: open\" - title : Incidents colSpan : 6 plugin : name : opsgenie options : type : incidents query : \"status: open\" Note kobs automatically adds the createdAt >= <selected-start-time> AND createdAt <= <selected-end-time> to all Opsgenie queries, so that only results for the selected time range are shown.","title":"Opsgenie"},{"location":"plugins/opsgenie/#opsgenie","text":"The Opsgenie plugin can be used to retrieve alerts and incidents from Opsgenie.","title":"Opsgenie"},{"location":"plugins/opsgenie/#options","text":"The following options can be used for a panel with the Opsgenie plugin: Field Type Description Required type string Specify if you want to show alerts or incidents . The default value is alerts . No query string The Opsgenie query. The documentation for the query language can be found in the Opsgenie Documentation . No For example the following dashboard shows all open alerts and incidents. --- apiVersion : kobs.io/v1beta1 kind : Dashboard spec : rows : - size : -1 panels : - title : Alerts colSpan : 6 plugin : name : opsgenie options : type : alerts query : \"status: open\" - title : Incidents colSpan : 6 plugin : name : opsgenie options : type : incidents query : \"status: open\" Note kobs automatically adds the createdAt >= <selected-start-time> AND createdAt <= <selected-end-time> to all Opsgenie queries, so that only results for the selected time range are shown.","title":"Options"},{"location":"plugins/prometheus/","text":"Prometheus The Prometheus plugin can be used to retrieve metrics from a configured Prometheus instance. Options The following options can be used for a panel with the Prometheus plugin: Field Type Description Required type string The type of the chart. Must be sparkline , line , area or table . Yes unit string An optional unit for the y axis of the chart. No stacked boolean When this is true all time series in the chart will be stacked. No legend string The type which should be used for the legend. Currently only table and table-large is supported as legend. If the value is not set, no legend will be shown. No yAxis yAxis Set the scale of the y axis. No mappings map Specify value mappings for your data. Note: The value must be provided as string (e.g. \"1\": \"Green\" ). No queries []Query A list of queries, which are used to get the data for the chart. Yes columns []Column A list of columns, which must be provided, when the type of the chart is table No yAxis The y axis can be customized for line and area charts. It is possible to use the min/max value of all returned time series or you can set a custom value. By default the scale of the y axis will be automatically determined. Field Type Description Required min auto , min , number The minimum value for the y axis. This could be auto , min (minimum value accross all displayed metrics) or a custom number. The default is auto . No max auto , max , number The minimum value for the y axis. This could be auto , max (maximum value accross all displayed metrics) or a custom number. The default is auto . No Query Field Type Description Required query string The PromQL query. Yes label string The label the results. The label can use the value of a variable or a label of the returned time series, e.g. {% .<prometheus-label> %} . If you want to use a Prometheus label make sure that the label name doesn't conflict with a variable name. Yes Note In sparkline charts the label must not be provided. If the label is provided in a sparkline chart the label will be displayed instead of the current value. Column Field Type Description Required name string The name of a column must be a returned label from the specified queries. To get the result of a query the special column value-N , where N is the index of the query. Yes header string An optional value for the header of the column. When this is not specified the name will be used as header for the column. No unit string An optional unit for the column values. No mappings map Specify value mappings for the column. Note: The value must be provided as string (e.g. \"1\": \"Green\" ). No Example The following dashboard, shows the CPU and Memory usage of a selected Pod. When this dashboard is used in via a team or application, it is possible to set the namespace and a regular expression to pre select all the Pods. These values are then used to get the names of all Pods and a user can then select the name of a Pod via the var_pod variable. The dashboard only uses the Prometheus plugin to show the CPU Usage, Memory Usage, the Network Usage and some other information via different charts and tables. --- apiVersion : kobs.io/v1beta1 kind : Dashboard spec : description : Resources Usage of Pods placeholders : - name : namespace description : Namespace for the Pods - name : pod description : Pod selector variables : - name : var_pod label : Pod plugin : name : prometheus options : type : labelValues label : pod query : container_cpu_usage_seconds_total{namespace=\"{{ .namespace }}\", image!=\"\", pod=~\"{{ .pod }}\", container!=\"POD\", container!=\"\"} allowAll : false rows : - size : 1 panels : - title : CPU Usage colSpan : 4 plugin : name : prometheus options : type : sparkline unit : Cores queries : - query : sum(rate(container_cpu_usage_seconds_total{namespace=\"{{ .namespace }}\", image!=\"\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}[2m])) - title : Memory Usage colSpan : 4 plugin : name : prometheus options : type : sparkline unit : MiB queries : - query : sum(container_memory_working_set_bytes{namespace=\"{{ .namespace }}\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) / 1024 / 1024 - title : Restarts colSpan : 4 plugin : name : prometheus options : type : sparkline queries : - query : kube_pod_container_status_restarts_total{namespace=\"{{ .namespace }}\", pod=~\"{% .var_pod %}\"} - size : 3 panels : - title : CPU Usage colSpan : 6 plugin : name : prometheus options : type : line unit : Cores legend : table queries : - label : \"Usage: {% .container %}\" query : sum(rate(container_cpu_usage_seconds_total{namespace=\"{{ .namespace }}\", image!=\"\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}[2m])) by (container) - label : \"Request: {% .container %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{{ .namespace }}\", resource=\"cpu\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) - label : \"Limits: {% .container %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{{ .namespace }}\", resource=\"cpu\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) - title : Memory Usage colSpan : 6 plugin : name : prometheus options : type : line unit : MiB legend : table queries : - label : \"Usage: {% .container %}\" query : sum(container_memory_working_set_bytes{namespace=\"{{ .namespace }}\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) / 1024 / 1024 - label : \"Request: {% .container %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{{ .namespace }}\", resource=\"memory\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) / 1024 / 1024 - label : \"Limits: {% .container %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{{ .namespace }}\", resource=\"memory\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) / 1024 / 1024 - title : Network size : 3 panels : - title : Bandwidth colSpan : 12 plugin : name : prometheus options : type : area unit : bytes/s queries : - label : Received query : sum(irate(container_network_receive_bytes_total{namespace=\"{{ .namespace }}\", pod=\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : -sum(irate(container_network_transmit_bytes_total{namespace=\"{{ .namespace }}\", pod=\"{% .var_pod %}\"}[2m])) by (pod) - title : Rate of Packets colSpan : 6 plugin : name : prometheus options : type : area unit : bytes/s queries : - label : Received query : sum(irate(container_network_receive_packets_total{namespace=~\"{{ .namespace }}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : -sum(irate(container_network_transmit_packets_total{namespace=~\"{{ .namespace }}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - title : Rate of Packets Dropped colSpan : 6 plugin : name : prometheus options : type : area unit : bytes/s queries : - label : Received query : sum(irate(container_network_receive_packets_dropped_total{namespace=~\"{{ .namespace }}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : -sum(irate(container_network_transmit_packets_dropped_total{namespace=~\"{{ .namespace }}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - title : \"Resource Usage for all Pods\" panels : - title : Table plugin : name : prometheus options : type : table queries : - label : \"{% .pod %}\" query : sum(rate(container_cpu_usage_seconds_total{namespace=\"{{ .namespace }}\", image!=\"\", pod=~\"{{ .pod }}\", container!=\"POD\", container!=\"\"}[2m])) by (pod) - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{{ .namespace }}\", resource=\"cpu\", pod=~\"{{ .pod }}\", container!=\"POD\", container!=\"\"}) by (pod) - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{{ .namespace }}\", resource=\"cpu\", pod=~\"{{ .pod }}\", container!=\"POD\", container!=\"\"}) by (pod) - label : \"{% .pod %}\" query : sum(container_memory_working_set_bytes{namespace=\"{{ .namespace }}\", pod=~\"{{ .pod }}\", container!=\"POD\", container!=\"\"}) by (pod) / 1024 / 1024 - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{{ .namespace }}\", resource=\"memory\", pod=~\"{{ .pod }}\", container!=\"POD\", container!=\"\"}) by (pod) / 1024 / 1024 - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{{ .namespace }}\", resource=\"memory\", pod=~\"{{ .pod }}\", container!=\"POD\", container!=\"\"}) by (pod) / 1024 / 1024 columns : - name : pod title : Pod - name : value-1 title : CPU Usage unit : Cores - name : value-2 title : CPU Requests unit : Cores - name : value-3 title : CPU Limits unit : Cores - name : value-4 title : Memory Usage unit : MiB - name : value-5 title : Memory Requests unit : MiB - name : value-6 title : Memory Limits unit : MiB","title":"Prometheus"},{"location":"plugins/prometheus/#prometheus","text":"The Prometheus plugin can be used to retrieve metrics from a configured Prometheus instance.","title":"Prometheus"},{"location":"plugins/prometheus/#options","text":"The following options can be used for a panel with the Prometheus plugin: Field Type Description Required type string The type of the chart. Must be sparkline , line , area or table . Yes unit string An optional unit for the y axis of the chart. No stacked boolean When this is true all time series in the chart will be stacked. No legend string The type which should be used for the legend. Currently only table and table-large is supported as legend. If the value is not set, no legend will be shown. No yAxis yAxis Set the scale of the y axis. No mappings map Specify value mappings for your data. Note: The value must be provided as string (e.g. \"1\": \"Green\" ). No queries []Query A list of queries, which are used to get the data for the chart. Yes columns []Column A list of columns, which must be provided, when the type of the chart is table No","title":"Options"},{"location":"plugins/prometheus/#yaxis","text":"The y axis can be customized for line and area charts. It is possible to use the min/max value of all returned time series or you can set a custom value. By default the scale of the y axis will be automatically determined. Field Type Description Required min auto , min , number The minimum value for the y axis. This could be auto , min (minimum value accross all displayed metrics) or a custom number. The default is auto . No max auto , max , number The minimum value for the y axis. This could be auto , max (maximum value accross all displayed metrics) or a custom number. The default is auto . No","title":"yAxis"},{"location":"plugins/prometheus/#query","text":"Field Type Description Required query string The PromQL query. Yes label string The label the results. The label can use the value of a variable or a label of the returned time series, e.g. {% .<prometheus-label> %} . If you want to use a Prometheus label make sure that the label name doesn't conflict with a variable name. Yes Note In sparkline charts the label must not be provided. If the label is provided in a sparkline chart the label will be displayed instead of the current value.","title":"Query"},{"location":"plugins/prometheus/#column","text":"Field Type Description Required name string The name of a column must be a returned label from the specified queries. To get the result of a query the special column value-N , where N is the index of the query. Yes header string An optional value for the header of the column. When this is not specified the name will be used as header for the column. No unit string An optional unit for the column values. No mappings map Specify value mappings for the column. Note: The value must be provided as string (e.g. \"1\": \"Green\" ). No","title":"Column"},{"location":"plugins/prometheus/#example","text":"The following dashboard, shows the CPU and Memory usage of a selected Pod. When this dashboard is used in via a team or application, it is possible to set the namespace and a regular expression to pre select all the Pods. These values are then used to get the names of all Pods and a user can then select the name of a Pod via the var_pod variable. The dashboard only uses the Prometheus plugin to show the CPU Usage, Memory Usage, the Network Usage and some other information via different charts and tables. --- apiVersion : kobs.io/v1beta1 kind : Dashboard spec : description : Resources Usage of Pods placeholders : - name : namespace description : Namespace for the Pods - name : pod description : Pod selector variables : - name : var_pod label : Pod plugin : name : prometheus options : type : labelValues label : pod query : container_cpu_usage_seconds_total{namespace=\"{{ .namespace }}\", image!=\"\", pod=~\"{{ .pod }}\", container!=\"POD\", container!=\"\"} allowAll : false rows : - size : 1 panels : - title : CPU Usage colSpan : 4 plugin : name : prometheus options : type : sparkline unit : Cores queries : - query : sum(rate(container_cpu_usage_seconds_total{namespace=\"{{ .namespace }}\", image!=\"\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}[2m])) - title : Memory Usage colSpan : 4 plugin : name : prometheus options : type : sparkline unit : MiB queries : - query : sum(container_memory_working_set_bytes{namespace=\"{{ .namespace }}\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) / 1024 / 1024 - title : Restarts colSpan : 4 plugin : name : prometheus options : type : sparkline queries : - query : kube_pod_container_status_restarts_total{namespace=\"{{ .namespace }}\", pod=~\"{% .var_pod %}\"} - size : 3 panels : - title : CPU Usage colSpan : 6 plugin : name : prometheus options : type : line unit : Cores legend : table queries : - label : \"Usage: {% .container %}\" query : sum(rate(container_cpu_usage_seconds_total{namespace=\"{{ .namespace }}\", image!=\"\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}[2m])) by (container) - label : \"Request: {% .container %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{{ .namespace }}\", resource=\"cpu\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) - label : \"Limits: {% .container %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{{ .namespace }}\", resource=\"cpu\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) - title : Memory Usage colSpan : 6 plugin : name : prometheus options : type : line unit : MiB legend : table queries : - label : \"Usage: {% .container %}\" query : sum(container_memory_working_set_bytes{namespace=\"{{ .namespace }}\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) / 1024 / 1024 - label : \"Request: {% .container %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{{ .namespace }}\", resource=\"memory\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) / 1024 / 1024 - label : \"Limits: {% .container %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{{ .namespace }}\", resource=\"memory\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) / 1024 / 1024 - title : Network size : 3 panels : - title : Bandwidth colSpan : 12 plugin : name : prometheus options : type : area unit : bytes/s queries : - label : Received query : sum(irate(container_network_receive_bytes_total{namespace=\"{{ .namespace }}\", pod=\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : -sum(irate(container_network_transmit_bytes_total{namespace=\"{{ .namespace }}\", pod=\"{% .var_pod %}\"}[2m])) by (pod) - title : Rate of Packets colSpan : 6 plugin : name : prometheus options : type : area unit : bytes/s queries : - label : Received query : sum(irate(container_network_receive_packets_total{namespace=~\"{{ .namespace }}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : -sum(irate(container_network_transmit_packets_total{namespace=~\"{{ .namespace }}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - title : Rate of Packets Dropped colSpan : 6 plugin : name : prometheus options : type : area unit : bytes/s queries : - label : Received query : sum(irate(container_network_receive_packets_dropped_total{namespace=~\"{{ .namespace }}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : -sum(irate(container_network_transmit_packets_dropped_total{namespace=~\"{{ .namespace }}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - title : \"Resource Usage for all Pods\" panels : - title : Table plugin : name : prometheus options : type : table queries : - label : \"{% .pod %}\" query : sum(rate(container_cpu_usage_seconds_total{namespace=\"{{ .namespace }}\", image!=\"\", pod=~\"{{ .pod }}\", container!=\"POD\", container!=\"\"}[2m])) by (pod) - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{{ .namespace }}\", resource=\"cpu\", pod=~\"{{ .pod }}\", container!=\"POD\", container!=\"\"}) by (pod) - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{{ .namespace }}\", resource=\"cpu\", pod=~\"{{ .pod }}\", container!=\"POD\", container!=\"\"}) by (pod) - label : \"{% .pod %}\" query : sum(container_memory_working_set_bytes{namespace=\"{{ .namespace }}\", pod=~\"{{ .pod }}\", container!=\"POD\", container!=\"\"}) by (pod) / 1024 / 1024 - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{{ .namespace }}\", resource=\"memory\", pod=~\"{{ .pod }}\", container!=\"POD\", container!=\"\"}) by (pod) / 1024 / 1024 - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{{ .namespace }}\", resource=\"memory\", pod=~\"{{ .pod }}\", container!=\"POD\", container!=\"\"}) by (pod) / 1024 / 1024 columns : - name : pod title : Pod - name : value-1 title : CPU Usage unit : Cores - name : value-2 title : CPU Requests unit : Cores - name : value-3 title : CPU Limits unit : Cores - name : value-4 title : Memory Usage unit : MiB - name : value-5 title : Memory Requests unit : MiB - name : value-6 title : Memory Limits unit : MiB","title":"Example"},{"location":"plugins/resources/","text":"Resources The resources plugin allows you to show a list of Kubernetes resources on a dashboard. Options Field Type Description Required clusters []string A list of clusters. If this value isn't provided, it will be the cluster from the team or application where the dashboard is used. No namespaces []string A list of namespaces. If this value isn't provided, it will be the namespace from the team or application where the dashboard is used. No resources []string A list of resources. Yes selector string An optional selector for the selection of resources No Note The following strings can be used as kinds: cronjobs , daemonsets , deployments , jobs , pods , replicasets , statefulsets , endpoints , horizontalpodautoscalers , ingresses , networkpolicies , services , configmaps , persistentvolumeclaims , persistentvolumes , poddisruptionbudgets , secrets , serviceaccounts , storageclasses , clusterrolebindings , clusterroles , rolebindings , roles , events , nodes , podsecuritypolicies . A Custom Resource can be specified in the following form <name>.<group>/<version> (e.g. vaultsecrets.ricoberger.de/v1alpha1 ). Example The following dashboard will display all Deployments and Pods from the bookinfo namespace, which are having the label app=reviews . --- apiVersion : kobs.io/v1beta1 kind : Dashboard spec : rows : - panels : - title : Resources in the bookinfo namespace plugin : name : resources options : - namespaces : - bookinfo resources : - pods - deployments selector : app=reviews","title":"Resources"},{"location":"plugins/resources/#resources","text":"The resources plugin allows you to show a list of Kubernetes resources on a dashboard.","title":"Resources"},{"location":"plugins/resources/#options","text":"Field Type Description Required clusters []string A list of clusters. If this value isn't provided, it will be the cluster from the team or application where the dashboard is used. No namespaces []string A list of namespaces. If this value isn't provided, it will be the namespace from the team or application where the dashboard is used. No resources []string A list of resources. Yes selector string An optional selector for the selection of resources No Note The following strings can be used as kinds: cronjobs , daemonsets , deployments , jobs , pods , replicasets , statefulsets , endpoints , horizontalpodautoscalers , ingresses , networkpolicies , services , configmaps , persistentvolumeclaims , persistentvolumes , poddisruptionbudgets , secrets , serviceaccounts , storageclasses , clusterrolebindings , clusterroles , rolebindings , roles , events , nodes , podsecuritypolicies . A Custom Resource can be specified in the following form <name>.<group>/<version> (e.g. vaultsecrets.ricoberger.de/v1alpha1 ).","title":"Options"},{"location":"plugins/resources/#example","text":"The following dashboard will display all Deployments and Pods from the bookinfo namespace, which are having the label app=reviews . --- apiVersion : kobs.io/v1beta1 kind : Dashboard spec : rows : - panels : - title : Resources in the bookinfo namespace plugin : name : resources options : - namespaces : - bookinfo resources : - pods - deployments selector : app=reviews","title":"Example"},{"location":"plugins/rss/","text":"RSS The RSS plugin can be used to show the latest status updates of third party services. Options The following options can be used for a panel with the RSS plugin: Field Type Description Required urls []string A list of RSS feed URLs. Yes sortBy string Set the field by which the retrieved feed items should be sorted. This can be feed , title , updated or published . The default value is published . No --- apiVersion : kobs.io/v1beta1 kind : Dashboard spec : rows : - size : -1 panels : - title : GitHub Status plugin : name : rss options : urls : - https://www.githubstatus.com/history.rss sortBy : updated","title":"RSS"},{"location":"plugins/rss/#rss","text":"The RSS plugin can be used to show the latest status updates of third party services.","title":"RSS"},{"location":"plugins/rss/#options","text":"The following options can be used for a panel with the RSS plugin: Field Type Description Required urls []string A list of RSS feed URLs. Yes sortBy string Set the field by which the retrieved feed items should be sorted. This can be feed , title , updated or published . The default value is published . No --- apiVersion : kobs.io/v1beta1 kind : Dashboard spec : rows : - size : -1 panels : - title : GitHub Status plugin : name : rss options : urls : - https://www.githubstatus.com/history.rss sortBy : updated","title":"Options"},{"location":"plugins/teams/","text":"Teams The teams plugin can be used to show a list of all teams on a dashboard. This plugin doesn't have any options. Example --- apiVersion : kobs.io/v1beta1 kind : Dashboard spec : rows : - size : -1 panels : - title : Teams plugin : name : teams","title":"Teams"},{"location":"plugins/teams/#teams","text":"The teams plugin can be used to show a list of all teams on a dashboard. This plugin doesn't have any options.","title":"Teams"},{"location":"plugins/teams/#example","text":"--- apiVersion : kobs.io/v1beta1 kind : Dashboard spec : rows : - size : -1 panels : - title : Teams plugin : name : teams","title":"Example"},{"location":"resources/applications/","text":"Applications Applications are an extension of kobs via the Application Custom Resource Definition . Applications can be used to monitor your Kubernetes workloads. For that you can add metrics, logs, traces and other information via the different plugins to your Kubernetes resources. You can access all applications via the Applications item on the home page of kobs. in the toolbar of the applications page you can select a list of clusters and namespaces for which you want to view the applications. You can also decide between the gallery and topology view. In the overview you will then see all the applications, with their descriptions or as in the screenshot below with the result for the defined preview plugin. When you select an application a details view on the left side of the page will open. This view contains all the defined dashboards for your application. Specification In the following you can found the specification for the Application CRD. On the bottom of this page you also have a complete example for an Application CR. Field Type Description Required description string Provide a descriptions for the application with additional details. No links []Link A list of links (e.g. a link to the GitHub repository for this application). No teams []Team A list of teams to define the ownership for the application. No dependencies []Dependency Add other applications as dependencies for this application. This can be used to render a topology graph for your applications. No preview Preview Show the most important metrics for your application in the gallery view. No dashboards []Dashboard A list of dashboards, which should be shown for this application. No Link Field Type Description Required title string Title for the link Yes link string The actuall link Yes Team Teams can be used to define the ownership for an application. It is also possible to retrieve a list of applications by the name of a team. Field Type Description Required cluster string Cluster of the team. If this field is omitted kobs will look in the same cluster as the application was created in. No namespace string Namespace of the team. If this field is omitted kobs will look in the same namespace as the application was created in. No name string Name of the team. Yes description string The description can be used to explain, why this team is the owner of the application. No Dependency Dependencies can be used to render a topology graph for all your applications. For that your have to add other applications as dependencies to the Application CR. Field Type Description Required cluster string Cluster of the application, which should be added as dependency. If this field is omitted kobs will look in the same cluster as the application was created in. No namespace string Namespace of the application, which should be added as dependency. If this field is omitted kobs will look in the same namespace as the application was created in. No name string Name of the application, which should be added as dependency. Yes description string The description can be used to explain, why this application is a dependency of the current application. No Preview Define a preview for your application, which should be shown in the gallery view. Field Type Description Required title string The title for the defined preview. Yes plugin Plugin The plugin, which should be used for the preview. Yes Dashboard Define the dashboards, which should be used for the application. Field Type Description Required cluster string Cluster of the dashboard. If this field is omitted kobs will look in the same cluster as the application was created in. No namespace string Namespace of the dashboard. If this field is omitted kobs will look in the same namespace as the application was created in. No name string Name of the dashboard. Yes title string Title for the dashboard Yes description string The description can be used to explain the content of the dashboard. No placeholders map A map of placeholders, whith the name as key and the value for the placeholder as value. More information for placeholders can be found in the documentation for Dashboards . No Example The following Application CR is used in the demo to display the resources, metrics, logs and traces for the reviews service of the Bookinfo Application. --- apiVersion : kobs.io/v1beta1 kind : Application metadata : name : reviews namespace : bookinfo spec : description : The reviews microservice contains book reviews. It also calls the ratings microservice. links : - title : Website link : https://istio.io/latest/docs/examples/bookinfo/ - title : GitHub link : https://github.com/istio/istio/tree/master/samples/bookinfo - title : Application CR link : https://github.com/kobsio/kobs/blob/main/deploy/demo/bookinfo/reviews-application.yaml teams : - name : squad-resident-evil namespace : kobs dependencies : - name : ratings description : Get book ranking information. preview : title : Incoming Success Rate plugin : name : prometheus options : unit : \"%\" queries : - query : sum(irate(istio_requests_total{reporter=\"destination\",destination_workload_namespace=~\"bookinfo\",destination_workload=~\"reviews-.*\",response_code!~\"5.*\"}[5m])) / sum(irate(istio_requests_total{reporter=\"destination\",destination_workload_namespace=~\"bookinfo\",destination_workload=~\"reviews-.*\"}[5m])) * 100 dashboards : - name : resources namespace : kobs title : Resources in the bookinfo namespace placeholders : namespace : bookinfo - name : resource-usage namespace : kobs title : Resource Usage placeholders : namespace : bookinfo pod : \"reviews-.*-.*-.*\" - name : istio-http namespace : kobs title : Istio HTTP Metrics placeholders : namespace : bookinfo app : reviews - name : istio-logs namespace : kobs title : Istio Logs placeholders : namespace : bookinfo app : reviews - name : traces namespace : kobs title : Traces placeholders : service : reviews.bookinfo In the fowlling you can find some screenshots how the above application will look in kobs. The application contains the Deployments and Pods, which are related to the reviews service of the Bookinfo Application. It also uses the Prometheus plugin to display metrics, the Elasticsearch plugin to display the logs and the Jaeger plugin to display the traces for the service. Resources Prometheus Elasticsearch Jaeger","title":"Applications"},{"location":"resources/applications/#applications","text":"Applications are an extension of kobs via the Application Custom Resource Definition . Applications can be used to monitor your Kubernetes workloads. For that you can add metrics, logs, traces and other information via the different plugins to your Kubernetes resources. You can access all applications via the Applications item on the home page of kobs. in the toolbar of the applications page you can select a list of clusters and namespaces for which you want to view the applications. You can also decide between the gallery and topology view. In the overview you will then see all the applications, with their descriptions or as in the screenshot below with the result for the defined preview plugin. When you select an application a details view on the left side of the page will open. This view contains all the defined dashboards for your application.","title":"Applications"},{"location":"resources/applications/#specification","text":"In the following you can found the specification for the Application CRD. On the bottom of this page you also have a complete example for an Application CR. Field Type Description Required description string Provide a descriptions for the application with additional details. No links []Link A list of links (e.g. a link to the GitHub repository for this application). No teams []Team A list of teams to define the ownership for the application. No dependencies []Dependency Add other applications as dependencies for this application. This can be used to render a topology graph for your applications. No preview Preview Show the most important metrics for your application in the gallery view. No dashboards []Dashboard A list of dashboards, which should be shown for this application. No","title":"Specification"},{"location":"resources/applications/#link","text":"Field Type Description Required title string Title for the link Yes link string The actuall link Yes","title":"Link"},{"location":"resources/applications/#team","text":"Teams can be used to define the ownership for an application. It is also possible to retrieve a list of applications by the name of a team. Field Type Description Required cluster string Cluster of the team. If this field is omitted kobs will look in the same cluster as the application was created in. No namespace string Namespace of the team. If this field is omitted kobs will look in the same namespace as the application was created in. No name string Name of the team. Yes description string The description can be used to explain, why this team is the owner of the application. No","title":"Team"},{"location":"resources/applications/#dependency","text":"Dependencies can be used to render a topology graph for all your applications. For that your have to add other applications as dependencies to the Application CR. Field Type Description Required cluster string Cluster of the application, which should be added as dependency. If this field is omitted kobs will look in the same cluster as the application was created in. No namespace string Namespace of the application, which should be added as dependency. If this field is omitted kobs will look in the same namespace as the application was created in. No name string Name of the application, which should be added as dependency. Yes description string The description can be used to explain, why this application is a dependency of the current application. No","title":"Dependency"},{"location":"resources/applications/#preview","text":"Define a preview for your application, which should be shown in the gallery view. Field Type Description Required title string The title for the defined preview. Yes plugin Plugin The plugin, which should be used for the preview. Yes","title":"Preview"},{"location":"resources/applications/#dashboard","text":"Define the dashboards, which should be used for the application. Field Type Description Required cluster string Cluster of the dashboard. If this field is omitted kobs will look in the same cluster as the application was created in. No namespace string Namespace of the dashboard. If this field is omitted kobs will look in the same namespace as the application was created in. No name string Name of the dashboard. Yes title string Title for the dashboard Yes description string The description can be used to explain the content of the dashboard. No placeholders map A map of placeholders, whith the name as key and the value for the placeholder as value. More information for placeholders can be found in the documentation for Dashboards . No","title":"Dashboard"},{"location":"resources/applications/#example","text":"The following Application CR is used in the demo to display the resources, metrics, logs and traces for the reviews service of the Bookinfo Application. --- apiVersion : kobs.io/v1beta1 kind : Application metadata : name : reviews namespace : bookinfo spec : description : The reviews microservice contains book reviews. It also calls the ratings microservice. links : - title : Website link : https://istio.io/latest/docs/examples/bookinfo/ - title : GitHub link : https://github.com/istio/istio/tree/master/samples/bookinfo - title : Application CR link : https://github.com/kobsio/kobs/blob/main/deploy/demo/bookinfo/reviews-application.yaml teams : - name : squad-resident-evil namespace : kobs dependencies : - name : ratings description : Get book ranking information. preview : title : Incoming Success Rate plugin : name : prometheus options : unit : \"%\" queries : - query : sum(irate(istio_requests_total{reporter=\"destination\",destination_workload_namespace=~\"bookinfo\",destination_workload=~\"reviews-.*\",response_code!~\"5.*\"}[5m])) / sum(irate(istio_requests_total{reporter=\"destination\",destination_workload_namespace=~\"bookinfo\",destination_workload=~\"reviews-.*\"}[5m])) * 100 dashboards : - name : resources namespace : kobs title : Resources in the bookinfo namespace placeholders : namespace : bookinfo - name : resource-usage namespace : kobs title : Resource Usage placeholders : namespace : bookinfo pod : \"reviews-.*-.*-.*\" - name : istio-http namespace : kobs title : Istio HTTP Metrics placeholders : namespace : bookinfo app : reviews - name : istio-logs namespace : kobs title : Istio Logs placeholders : namespace : bookinfo app : reviews - name : traces namespace : kobs title : Traces placeholders : service : reviews.bookinfo In the fowlling you can find some screenshots how the above application will look in kobs. The application contains the Deployments and Pods, which are related to the reviews service of the Bookinfo Application. It also uses the Prometheus plugin to display metrics, the Elasticsearch plugin to display the logs and the Jaeger plugin to display the traces for the service.","title":"Example"},{"location":"resources/applications/#resources","text":"","title":"Resources"},{"location":"resources/applications/#prometheus","text":"","title":"Prometheus"},{"location":"resources/applications/#elasticsearch","text":"","title":"Elasticsearch"},{"location":"resources/applications/#jaeger","text":"","title":"Jaeger"},{"location":"resources/dashboards/","text":"Dashboards Dashboards are an extension of kobs via the Dashboard Custom Resource Definition . Dashboards are used to add additional information for teams and applications via all the configured plugins. You can access all dashboards via the Dashboards item on the home page of kobs. On the dashboards page it will show all dashboards from all clusters and namespaces. When you click on one of the dashboards an modal will be shown, where you can provide the default cluster and namespace and placeholders The dashboards page is only there to explore all the available dashboards, but for your daily work you should add the dashboards as reference in your Team and Applications . Specification In the following you can found the specification for the Dashboard CRD. On the bottom of this page you also have a complete example for a Dashboard CR. Field Type Description Required description string Provide a descriptions for the dashboard with additional details. No placeholders []Placeholder A list of placeholders, which can be directly set by the user. No variables []Variable A list of variables, where the values are loaded by the specified plugin. No Rows []Row A list of rows for the dashboard. Yes Placeholder Placeholders are providing a way to use custom values in the dashboard. The value for a placeholder must be set by the user in the dashboards reference of a Team or an Applications . The value of a placeholder can be used via the following templating string: {{ .<placeholder-name> }} . This string is then replaced with the provided value when the dashboard is loaded. Field Type Description Required name string The name for the placeholder, which can be used in the dashboard via {{ .<placeholder-name> }} . Yes description string An optional description, to provide more information how the placeholder is used. No Variable Variables can be used to select between different values in the dashboard. To use the variable in the dashboard, the following templating string can be used: {% .<variable-name> %} . Field Type Description Required name string The name of the variable, which can be used in the dashboard via {% .<variable-name> %} . Yes label string An optional label, which is shown in the UI instead of the variable name. No hide boolean Hide the variable in the UI. No plugin Variable Plugin The plugin, which should be used to get the values for the variable. Yes Variable Plugin Field Type Description Required name string The name of the plugin, this must be core or the name of an configured Prometheus instance. Yes options Variable Plugin Options Plugin specific options to retrieve the values for the variable. Yes Variable Plugin Options If the core plugin is used to get the values for a variable the options from the following table can be used. The clusters type let you select a cluster from all the loaded cluster, the plugins type let you select the name of all configured plugins and the static type let you specify a list of static values. Field Type Description Required type string The type for the core plugin. This must be clusters , plugins or static . Yes items []string A list of static values for the static type. Yes Example --- apiVersion : kobs.io/v1beta1 kind : Dashboard spec : variables : - name : cluster label : Cluster plugin : name : core options : type : clusters - name : plugin label : Plugins plugin : name : core options : type : plugins - name : mystaticvalues label : My Static Values plugin : name : core options : type : static items : - myvalue1 - myvalue2 - myvalue3 If a Prometheus instance is used to get the variable values, the options from the following table can be used. Field Type Description Required type string The query type to get the values for the variable. At the moment this must be labelValues Yes label string The Prometheus label which should be used to get the values for the variable. Yes query string The PromQL query. Yes allowAll boolean If this is set to true an additional option for the variable will be added, which contains all other values. No Row A row can be used to create logical groups in the dashboard. Field Type Description Required title string The title for a row. No description string The description for the row, to provide additional details about the content of the row. No size number The size of the row. This must be a value between 1 and 12 . The default value is 2 . You can also use the special value -1 to not limit the height of the row. No panels []Panel A list of panels for the row. Yes Panel All specified panels are rendered in a 12 column grid and they are containing the plugin specification. Field Type Description Required title string The title of the panel. Yes description string An optional description with additional information about the panel. No colSpan number The number of columns, which should be used by the panel. This must be a number between 1 and 12 . The default value is 12 . No rowSpan number The number of rows, which should be used by the panel. This must be a number between 1 and 12 . The default value is 1 . No plugin Plugin The plugin which should be displayed in the panel. Yes Example The following dashboard, shows the CPU and Memory usage of a selected Pod. When this dashboard is used in via a team or application, it is possible to set the namespace and a regular expression to pre select all the Pods. These values are then used to get the names of all Pods and a user can then select the name of a Pod via the var_pod variable. The dashboard only uses the Prometheus plugin to show the CPU Usage, Memory Usage, the Network Usage and some other information via different charts and tables. --- apiVersion : kobs.io/v1beta1 kind : Dashboard metadata : name : resource-usage namespace : kobs spec : description : Resources Usage of Pods placeholders : - name : namespace description : Namespace for the Pods - name : pod description : Pod selector variables : - name : var_pod label : Pod plugin : name : prometheus options : type : labelValues label : pod query : container_cpu_usage_seconds_total{namespace=\"{{ .namespace }}\", image!=\"\", pod=~\"{{ .pod }}\", container!=\"POD\", container!=\"\"} allowAll : false rows : - size : 1 panels : - title : CPU Usage colSpan : 4 plugin : name : prometheus options : type : sparkline unit : Cores queries : - query : sum(rate(container_cpu_usage_seconds_total{namespace=\"{{ .namespace }}\", image!=\"\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}[2m])) - title : Memory Usage colSpan : 4 plugin : name : prometheus options : type : sparkline unit : MiB queries : - query : sum(container_memory_working_set_bytes{namespace=\"{{ .namespace }}\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) / 1024 / 1024 - title : Restarts colSpan : 4 plugin : name : prometheus options : type : sparkline queries : - query : kube_pod_container_status_restarts_total{namespace=\"{{ .namespace }}\", pod=~\"{% .var_pod %}\"} - size : 3 panels : - title : CPU Usage colSpan : 6 plugin : name : prometheus options : type : line unit : Cores legend : table queries : - label : \"Usage: {% .container %}\" query : sum(rate(container_cpu_usage_seconds_total{namespace=\"{{ .namespace }}\", image!=\"\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}[2m])) by (container) - label : \"Request: {% .container %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{{ .namespace }}\", resource=\"cpu\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) - label : \"Limits: {% .container %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{{ .namespace }}\", resource=\"cpu\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) - title : Memory Usage colSpan : 6 plugin : name : prometheus options : type : line unit : MiB legend : table queries : - label : \"Usage: {% .container %}\" query : sum(container_memory_working_set_bytes{namespace=\"{{ .namespace }}\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) / 1024 / 1024 - label : \"Request: {% .container %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{{ .namespace }}\", resource=\"memory\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) / 1024 / 1024 - label : \"Limits: {% .container %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{{ .namespace }}\", resource=\"memory\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) / 1024 / 1024 - title : Network size : 3 panels : - title : Bandwidth colSpan : 12 plugin : name : prometheus options : type : area unit : bytes/s queries : - label : Received query : sum(irate(container_network_receive_bytes_total{namespace=\"{{ .namespace }}\", pod=\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : -sum(irate(container_network_transmit_bytes_total{namespace=\"{{ .namespace }}\", pod=\"{% .var_pod %}\"}[2m])) by (pod) - title : Rate of Packets colSpan : 6 plugin : name : prometheus options : type : area unit : bytes/s queries : - label : Received query : sum(irate(container_network_receive_packets_total{namespace=~\"{{ .namespace }}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : -sum(irate(container_network_transmit_packets_total{namespace=~\"{{ .namespace }}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - title : Rate of Packets Dropped colSpan : 6 plugin : name : prometheus options : type : area unit : bytes/s queries : - label : Received query : sum(irate(container_network_receive_packets_dropped_total{namespace=~\"{{ .namespace }}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : -sum(irate(container_network_transmit_packets_dropped_total{namespace=~\"{{ .namespace }}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - title : \"Resource Usage for all Pods\" panels : - title : Table plugin : name : prometheus options : type : table queries : - label : \"{% .pod %}\" query : sum(rate(container_cpu_usage_seconds_total{namespace=\"{{ .namespace }}\", image!=\"\", pod=~\"{{ .pod }}\", container!=\"POD\", container!=\"\"}[2m])) by (pod) - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{{ .namespace }}\", resource=\"cpu\", pod=~\"{{ .pod }}\", container!=\"POD\", container!=\"\"}) by (pod) - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{{ .namespace }}\", resource=\"cpu\", pod=~\"{{ .pod }}\", container!=\"POD\", container!=\"\"}) by (pod) - label : \"{% .pod %}\" query : sum(container_memory_working_set_bytes{namespace=\"{{ .namespace }}\", pod=~\"{{ .pod }}\", container!=\"POD\", container!=\"\"}) by (pod) / 1024 / 1024 - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{{ .namespace }}\", resource=\"memory\", pod=~\"{{ .pod }}\", container!=\"POD\", container!=\"\"}) by (pod) / 1024 / 1024 - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{{ .namespace }}\", resource=\"memory\", pod=~\"{{ .pod }}\", container!=\"POD\", container!=\"\"}) by (pod) / 1024 / 1024 columns : - name : pod title : Pod - name : value-1 title : CPU Usage unit : Cores - name : value-2 title : CPU Requests unit : Cores - name : value-3 title : CPU Limits unit : Cores - name : value-4 title : Memory Usage unit : MiB - name : value-5 title : Memory Requests unit : MiB - name : value-6 title : Memory Limits unit : MiB","title":"Dashboards"},{"location":"resources/dashboards/#dashboards","text":"Dashboards are an extension of kobs via the Dashboard Custom Resource Definition . Dashboards are used to add additional information for teams and applications via all the configured plugins. You can access all dashboards via the Dashboards item on the home page of kobs. On the dashboards page it will show all dashboards from all clusters and namespaces. When you click on one of the dashboards an modal will be shown, where you can provide the default cluster and namespace and placeholders The dashboards page is only there to explore all the available dashboards, but for your daily work you should add the dashboards as reference in your Team and Applications .","title":"Dashboards"},{"location":"resources/dashboards/#specification","text":"In the following you can found the specification for the Dashboard CRD. On the bottom of this page you also have a complete example for a Dashboard CR. Field Type Description Required description string Provide a descriptions for the dashboard with additional details. No placeholders []Placeholder A list of placeholders, which can be directly set by the user. No variables []Variable A list of variables, where the values are loaded by the specified plugin. No Rows []Row A list of rows for the dashboard. Yes","title":"Specification"},{"location":"resources/dashboards/#placeholder","text":"Placeholders are providing a way to use custom values in the dashboard. The value for a placeholder must be set by the user in the dashboards reference of a Team or an Applications . The value of a placeholder can be used via the following templating string: {{ .<placeholder-name> }} . This string is then replaced with the provided value when the dashboard is loaded. Field Type Description Required name string The name for the placeholder, which can be used in the dashboard via {{ .<placeholder-name> }} . Yes description string An optional description, to provide more information how the placeholder is used. No","title":"Placeholder"},{"location":"resources/dashboards/#variable","text":"Variables can be used to select between different values in the dashboard. To use the variable in the dashboard, the following templating string can be used: {% .<variable-name> %} . Field Type Description Required name string The name of the variable, which can be used in the dashboard via {% .<variable-name> %} . Yes label string An optional label, which is shown in the UI instead of the variable name. No hide boolean Hide the variable in the UI. No plugin Variable Plugin The plugin, which should be used to get the values for the variable. Yes","title":"Variable"},{"location":"resources/dashboards/#variable-plugin","text":"Field Type Description Required name string The name of the plugin, this must be core or the name of an configured Prometheus instance. Yes options Variable Plugin Options Plugin specific options to retrieve the values for the variable. Yes","title":"Variable Plugin"},{"location":"resources/dashboards/#variable-plugin-options","text":"If the core plugin is used to get the values for a variable the options from the following table can be used. The clusters type let you select a cluster from all the loaded cluster, the plugins type let you select the name of all configured plugins and the static type let you specify a list of static values. Field Type Description Required type string The type for the core plugin. This must be clusters , plugins or static . Yes items []string A list of static values for the static type. Yes Example --- apiVersion : kobs.io/v1beta1 kind : Dashboard spec : variables : - name : cluster label : Cluster plugin : name : core options : type : clusters - name : plugin label : Plugins plugin : name : core options : type : plugins - name : mystaticvalues label : My Static Values plugin : name : core options : type : static items : - myvalue1 - myvalue2 - myvalue3 If a Prometheus instance is used to get the variable values, the options from the following table can be used. Field Type Description Required type string The query type to get the values for the variable. At the moment this must be labelValues Yes label string The Prometheus label which should be used to get the values for the variable. Yes query string The PromQL query. Yes allowAll boolean If this is set to true an additional option for the variable will be added, which contains all other values. No","title":"Variable Plugin Options"},{"location":"resources/dashboards/#row","text":"A row can be used to create logical groups in the dashboard. Field Type Description Required title string The title for a row. No description string The description for the row, to provide additional details about the content of the row. No size number The size of the row. This must be a value between 1 and 12 . The default value is 2 . You can also use the special value -1 to not limit the height of the row. No panels []Panel A list of panels for the row. Yes","title":"Row"},{"location":"resources/dashboards/#panel","text":"All specified panels are rendered in a 12 column grid and they are containing the plugin specification. Field Type Description Required title string The title of the panel. Yes description string An optional description with additional information about the panel. No colSpan number The number of columns, which should be used by the panel. This must be a number between 1 and 12 . The default value is 12 . No rowSpan number The number of rows, which should be used by the panel. This must be a number between 1 and 12 . The default value is 1 . No plugin Plugin The plugin which should be displayed in the panel. Yes","title":"Panel"},{"location":"resources/dashboards/#example","text":"The following dashboard, shows the CPU and Memory usage of a selected Pod. When this dashboard is used in via a team or application, it is possible to set the namespace and a regular expression to pre select all the Pods. These values are then used to get the names of all Pods and a user can then select the name of a Pod via the var_pod variable. The dashboard only uses the Prometheus plugin to show the CPU Usage, Memory Usage, the Network Usage and some other information via different charts and tables. --- apiVersion : kobs.io/v1beta1 kind : Dashboard metadata : name : resource-usage namespace : kobs spec : description : Resources Usage of Pods placeholders : - name : namespace description : Namespace for the Pods - name : pod description : Pod selector variables : - name : var_pod label : Pod plugin : name : prometheus options : type : labelValues label : pod query : container_cpu_usage_seconds_total{namespace=\"{{ .namespace }}\", image!=\"\", pod=~\"{{ .pod }}\", container!=\"POD\", container!=\"\"} allowAll : false rows : - size : 1 panels : - title : CPU Usage colSpan : 4 plugin : name : prometheus options : type : sparkline unit : Cores queries : - query : sum(rate(container_cpu_usage_seconds_total{namespace=\"{{ .namespace }}\", image!=\"\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}[2m])) - title : Memory Usage colSpan : 4 plugin : name : prometheus options : type : sparkline unit : MiB queries : - query : sum(container_memory_working_set_bytes{namespace=\"{{ .namespace }}\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) / 1024 / 1024 - title : Restarts colSpan : 4 plugin : name : prometheus options : type : sparkline queries : - query : kube_pod_container_status_restarts_total{namespace=\"{{ .namespace }}\", pod=~\"{% .var_pod %}\"} - size : 3 panels : - title : CPU Usage colSpan : 6 plugin : name : prometheus options : type : line unit : Cores legend : table queries : - label : \"Usage: {% .container %}\" query : sum(rate(container_cpu_usage_seconds_total{namespace=\"{{ .namespace }}\", image!=\"\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}[2m])) by (container) - label : \"Request: {% .container %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{{ .namespace }}\", resource=\"cpu\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) - label : \"Limits: {% .container %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{{ .namespace }}\", resource=\"cpu\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) - title : Memory Usage colSpan : 6 plugin : name : prometheus options : type : line unit : MiB legend : table queries : - label : \"Usage: {% .container %}\" query : sum(container_memory_working_set_bytes{namespace=\"{{ .namespace }}\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) / 1024 / 1024 - label : \"Request: {% .container %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{{ .namespace }}\", resource=\"memory\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) / 1024 / 1024 - label : \"Limits: {% .container %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{{ .namespace }}\", resource=\"memory\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) / 1024 / 1024 - title : Network size : 3 panels : - title : Bandwidth colSpan : 12 plugin : name : prometheus options : type : area unit : bytes/s queries : - label : Received query : sum(irate(container_network_receive_bytes_total{namespace=\"{{ .namespace }}\", pod=\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : -sum(irate(container_network_transmit_bytes_total{namespace=\"{{ .namespace }}\", pod=\"{% .var_pod %}\"}[2m])) by (pod) - title : Rate of Packets colSpan : 6 plugin : name : prometheus options : type : area unit : bytes/s queries : - label : Received query : sum(irate(container_network_receive_packets_total{namespace=~\"{{ .namespace }}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : -sum(irate(container_network_transmit_packets_total{namespace=~\"{{ .namespace }}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - title : Rate of Packets Dropped colSpan : 6 plugin : name : prometheus options : type : area unit : bytes/s queries : - label : Received query : sum(irate(container_network_receive_packets_dropped_total{namespace=~\"{{ .namespace }}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : -sum(irate(container_network_transmit_packets_dropped_total{namespace=~\"{{ .namespace }}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - title : \"Resource Usage for all Pods\" panels : - title : Table plugin : name : prometheus options : type : table queries : - label : \"{% .pod %}\" query : sum(rate(container_cpu_usage_seconds_total{namespace=\"{{ .namespace }}\", image!=\"\", pod=~\"{{ .pod }}\", container!=\"POD\", container!=\"\"}[2m])) by (pod) - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{{ .namespace }}\", resource=\"cpu\", pod=~\"{{ .pod }}\", container!=\"POD\", container!=\"\"}) by (pod) - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{{ .namespace }}\", resource=\"cpu\", pod=~\"{{ .pod }}\", container!=\"POD\", container!=\"\"}) by (pod) - label : \"{% .pod %}\" query : sum(container_memory_working_set_bytes{namespace=\"{{ .namespace }}\", pod=~\"{{ .pod }}\", container!=\"POD\", container!=\"\"}) by (pod) / 1024 / 1024 - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{{ .namespace }}\", resource=\"memory\", pod=~\"{{ .pod }}\", container!=\"POD\", container!=\"\"}) by (pod) / 1024 / 1024 - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{{ .namespace }}\", resource=\"memory\", pod=~\"{{ .pod }}\", container!=\"POD\", container!=\"\"}) by (pod) / 1024 / 1024 columns : - name : pod title : Pod - name : value-1 title : CPU Usage unit : Cores - name : value-2 title : CPU Requests unit : Cores - name : value-3 title : CPU Limits unit : Cores - name : value-4 title : Memory Usage unit : MiB - name : value-5 title : Memory Requests unit : MiB - name : value-6 title : Memory Limits unit : MiB","title":"Example"},{"location":"resources/resources/","text":"Resources kobs supports all Kubernetes objects like Pods, Deployments, StatefulSets and Custom Resources. Ensure that kobs has enough permissions to retrieve all these resources from the Kubernetes API server. If you are using the Helm chart or Kustomize to install kobs, it will automatically create the correct Cluster Role and Cluster Role Binding, so that you can view all these resources. You can access the Kubernetes objects via the Resources item on the home page of kobs. In the toolbar of the resources page, you can select the clusters, resources and namespaces for which you want to view the resources. The results are group by the resource type. The table for each resource contains the same fields as kubectl for the standard Kubernetes objects. For Custom Resources the fields defined in the additionalPrinterColumns of the Custom Resource Definition are shown. By selecting an item in the table, you can view some details for this resource. All the details can be found in the overview tab. If you want to view the Yaml representation of the resource you can select the corresponding tab. Next to the yaml representation, you find a seconde tab events, which shows all events, which are related to the selected object. The events are retrieved with a field selector and the name of the resource: fieldSelector=involvedObject.name=<NAME-OF-THE-RESOURCE> . Actions kobs provides several actions for all Kubernetes resources. These actions can be found in the upper right corner in the details view next to the close icon. For each resource it is possible to edit and delete the selected resource. Next to these default actions, kobs also has some other actions for some resources: Scale Deployments, StatefulSets and ReplicaSets ( kubectl scale --replicas=3 deployment/bookinfo ) Restart DaemonSets, Deployments and StatefulSets ( kubectl rollout restart deployment bookinfo ) Trigger a CronJob manually ( kubectl create job --from=cronjob/backup backup-manual-qg0qjf ) Note Make sure, that kobs has enough permissions to create, edit and delete resource. If the permissions are missing an error will be returned when a user triggers one of the actions. Annotations You can extend your resources with additional information for kobs, by using annotations. This allows you to specify teams, applications and dashboards for your Kubernetes objects like Pods, Deployments, etc. Annotations Format Description kobs.io/teams [{\"cluster\": \"<cluster-name>\", \"namespace\": \"<namespace-name>\", \"name\": \"<team-name>\"}, {...}] Specify a list of teams. You have to provide the name of the team and an optional cluster / namespace. If the cluster / namespace is not specified, the cluster / namespace of the resource will be used. kobs.io/applications [{\"cluster\": \"<cluster-name>\", \"namespace\": \"<namespace-name>\", \"name\": \"<application-name>\"}, {...}] Specify a list of applications. You have to provide the name of the application and an optional cluster / namespace. If the cluster / namespace is not specified, the cluster / namespace of the resource will be used. kobs.io/dashboards [{\"cluster\": \"<cluster-name>\", \"namespace\": \"<namespace-name>\", \"name\": \"<application-name>\", \"title\": \"<dashboard-title>\", \"placeholders\": {\"placeholder1\": \"<placeholder1-value>\", \"placeholder2\": \"<placeholder2-value>\"}}, {...}] Teams Specify a list of teams within the kobs.io/teams annotation. The list contains an array of teams, where each team is identified by a cluster, namespace and name. If the cluster or namespace isn't set the cluster / namespace of the Kubernetes resource will be used. apiVersion : apps/v1 kind : Deployment metadata : name : productpage-v1 namespace : bookinfo labels : app : productpage version : v1 annotations : kobs.io/teams : | [{\"namespace\": \"kobs\", \"name\": \"team-diablo\"}, {\"namespace\": \"kobs\", \"name\": \"team-resident-evil\"}, {\"namespace\": \"kobs\", \"name\": \"team-call-of-duty\"}] Applications Specify a list of applications within the kobs.io/applications annotation. The list contains an array of applications, where each application is identified by a cluster, namespace and name. If the cluster or namespace isn't set the cluster / namespace of the Kubernetes resource will be used. apiVersion : apps/v1 kind : Deployment metadata : name : productpage-v1 namespace : bookinfo labels : app : productpage version : v1 annotations : kobs.io/applications : | [{\"name\": \"productpage\"}] Dashboards Specify a list of dashboards within the kobs.io/dashboards annotation. The list contains multiple dashboards, as they can be set for applications and teams . To set the value of a placeholder, you can use a JSONPath . The JSONPath is run against the resource manifest, so that for example $.metadata.name will use the name of the resource as value for a placeholder. Note We are using the jsonpath-plus to extract the content from the Kubernetes objects. A list of examples can be found within the documentation of the module. The following example adds the kobs.io/teams , kobs.io/applications and kobs.io/dashboards annotation to each Pod of the productpage-v1 Deployment. The corresponding Pods will then have a dashboard which can be used to view the resource usage of this Pod and the logs for the Pods from Elasticsearch. --- apiVersion : apps/v1 kind : Deployment metadata : name : productpage-v1 namespace : bookinfo spec : selector : matchLabels : app : productpage version : v1 template : metadata : labels : app : productpage version : v1 annotations : kobs.io/teams : | [{\"namespace\": \"kobs\", \"name\": \"team-diablo\"}, {\"namespace\": \"kobs\", \"name\": \"team-resident-evil\"}, {\"namespace\": \"kobs\", \"name\": \"team-call-of-duty\"}] kobs.io/applications : | [{\"name\": \"productpage\"}] kobs.io/dashboards : | [{\"namespace\": \"kobs\", \"name\": \"resource-usage\", \"title\": \"Resource Usage\", \"placeholders\": {\"namespace\": \"bookinfo\", \"pod\": \"$.metadata.name\"}}, {\"namespace\": \"kobs\", \"name\": \"pod-logs\", \"title\": \"Logs\", \"placeholders\": {\"namespace\": \"bookinfo\", \"name\": \"$.metadata.name\"}}]","title":"Resources"},{"location":"resources/resources/#resources","text":"kobs supports all Kubernetes objects like Pods, Deployments, StatefulSets and Custom Resources. Ensure that kobs has enough permissions to retrieve all these resources from the Kubernetes API server. If you are using the Helm chart or Kustomize to install kobs, it will automatically create the correct Cluster Role and Cluster Role Binding, so that you can view all these resources. You can access the Kubernetes objects via the Resources item on the home page of kobs. In the toolbar of the resources page, you can select the clusters, resources and namespaces for which you want to view the resources. The results are group by the resource type. The table for each resource contains the same fields as kubectl for the standard Kubernetes objects. For Custom Resources the fields defined in the additionalPrinterColumns of the Custom Resource Definition are shown. By selecting an item in the table, you can view some details for this resource. All the details can be found in the overview tab. If you want to view the Yaml representation of the resource you can select the corresponding tab. Next to the yaml representation, you find a seconde tab events, which shows all events, which are related to the selected object. The events are retrieved with a field selector and the name of the resource: fieldSelector=involvedObject.name=<NAME-OF-THE-RESOURCE> .","title":"Resources"},{"location":"resources/resources/#actions","text":"kobs provides several actions for all Kubernetes resources. These actions can be found in the upper right corner in the details view next to the close icon. For each resource it is possible to edit and delete the selected resource. Next to these default actions, kobs also has some other actions for some resources: Scale Deployments, StatefulSets and ReplicaSets ( kubectl scale --replicas=3 deployment/bookinfo ) Restart DaemonSets, Deployments and StatefulSets ( kubectl rollout restart deployment bookinfo ) Trigger a CronJob manually ( kubectl create job --from=cronjob/backup backup-manual-qg0qjf ) Note Make sure, that kobs has enough permissions to create, edit and delete resource. If the permissions are missing an error will be returned when a user triggers one of the actions.","title":"Actions"},{"location":"resources/resources/#annotations","text":"You can extend your resources with additional information for kobs, by using annotations. This allows you to specify teams, applications and dashboards for your Kubernetes objects like Pods, Deployments, etc. Annotations Format Description kobs.io/teams [{\"cluster\": \"<cluster-name>\", \"namespace\": \"<namespace-name>\", \"name\": \"<team-name>\"}, {...}] Specify a list of teams. You have to provide the name of the team and an optional cluster / namespace. If the cluster / namespace is not specified, the cluster / namespace of the resource will be used. kobs.io/applications [{\"cluster\": \"<cluster-name>\", \"namespace\": \"<namespace-name>\", \"name\": \"<application-name>\"}, {...}] Specify a list of applications. You have to provide the name of the application and an optional cluster / namespace. If the cluster / namespace is not specified, the cluster / namespace of the resource will be used. kobs.io/dashboards [{\"cluster\": \"<cluster-name>\", \"namespace\": \"<namespace-name>\", \"name\": \"<application-name>\", \"title\": \"<dashboard-title>\", \"placeholders\": {\"placeholder1\": \"<placeholder1-value>\", \"placeholder2\": \"<placeholder2-value>\"}}, {...}]","title":"Annotations"},{"location":"resources/resources/#teams","text":"Specify a list of teams within the kobs.io/teams annotation. The list contains an array of teams, where each team is identified by a cluster, namespace and name. If the cluster or namespace isn't set the cluster / namespace of the Kubernetes resource will be used. apiVersion : apps/v1 kind : Deployment metadata : name : productpage-v1 namespace : bookinfo labels : app : productpage version : v1 annotations : kobs.io/teams : | [{\"namespace\": \"kobs\", \"name\": \"team-diablo\"}, {\"namespace\": \"kobs\", \"name\": \"team-resident-evil\"}, {\"namespace\": \"kobs\", \"name\": \"team-call-of-duty\"}]","title":"Teams"},{"location":"resources/resources/#applications","text":"Specify a list of applications within the kobs.io/applications annotation. The list contains an array of applications, where each application is identified by a cluster, namespace and name. If the cluster or namespace isn't set the cluster / namespace of the Kubernetes resource will be used. apiVersion : apps/v1 kind : Deployment metadata : name : productpage-v1 namespace : bookinfo labels : app : productpage version : v1 annotations : kobs.io/applications : | [{\"name\": \"productpage\"}]","title":"Applications"},{"location":"resources/resources/#dashboards","text":"Specify a list of dashboards within the kobs.io/dashboards annotation. The list contains multiple dashboards, as they can be set for applications and teams . To set the value of a placeholder, you can use a JSONPath . The JSONPath is run against the resource manifest, so that for example $.metadata.name will use the name of the resource as value for a placeholder. Note We are using the jsonpath-plus to extract the content from the Kubernetes objects. A list of examples can be found within the documentation of the module. The following example adds the kobs.io/teams , kobs.io/applications and kobs.io/dashboards annotation to each Pod of the productpage-v1 Deployment. The corresponding Pods will then have a dashboard which can be used to view the resource usage of this Pod and the logs for the Pods from Elasticsearch. --- apiVersion : apps/v1 kind : Deployment metadata : name : productpage-v1 namespace : bookinfo spec : selector : matchLabels : app : productpage version : v1 template : metadata : labels : app : productpage version : v1 annotations : kobs.io/teams : | [{\"namespace\": \"kobs\", \"name\": \"team-diablo\"}, {\"namespace\": \"kobs\", \"name\": \"team-resident-evil\"}, {\"namespace\": \"kobs\", \"name\": \"team-call-of-duty\"}] kobs.io/applications : | [{\"name\": \"productpage\"}] kobs.io/dashboards : | [{\"namespace\": \"kobs\", \"name\": \"resource-usage\", \"title\": \"Resource Usage\", \"placeholders\": {\"namespace\": \"bookinfo\", \"pod\": \"$.metadata.name\"}}, {\"namespace\": \"kobs\", \"name\": \"pod-logs\", \"title\": \"Logs\", \"placeholders\": {\"namespace\": \"bookinfo\", \"name\": \"$.metadata.name\"}}]","title":"Dashboards"},{"location":"resources/teams/","text":"Teams Teams are an extension of kobs via the Team Custom Resource Definition . Teams can be used to define the ownership for resources and applications. You can access all teams via the Teams item on the home page of kobs. Specification In the following you can found the specification for the Team CRD. Field Type Description Required description string A description for the team. Yes logo string The logo for the team. Must be a path to an image file. Yes links []Link A list of links (e.g. a link to the teams Slack channel, Confluence page, etc.) No dashboards []Dashboard No Link Field Type Description Required title string Title for the link Yes link string The actuall link Yes Dashboard Define the dashboards, which should be used for the team. Field Type Description Required cluster string Cluster of the dashboard. If this field is omitted kobs will look in the same cluster as the application was created in. No namespace string Namespace of the dashboard. If this field is omitted kobs will look in the same namespace as the application was created in. No name string Name of the dashboard. Yes title string Title for the dashboard Yes description string The description can be used to explain the content of the dashboard. No placeholders map A map of placeholders, whith the name as key and the value for the placeholder as value. More information for placeholders can be found in the documentation for Dashboards . No Example The following Team CR will add a new team called team-diablo . The team page will display all the applications from the bookinfo namespace and the resource usage of the Pods in this namespace. --- apiVersion : kobs.io/v1beta1 kind : Team metadata : name : team-diablo namespace : kobs spec : description : Productpage and Details logo : https://kobs.io/installation/assets/team-diablo.png links : - title : Website link : https://istio.io/latest/docs/examples/bookinfo/ - title : GitHub link : https://github.com/istio/istio/tree/master/samples/bookinfo dashboards : - name : resources namespace : kobs title : Resources in the bookinfo namespace placeholders : namespace : bookinfo - name : resource-usage namespace : kobs title : Resource Usage placeholders : namespace : bookinfo pod : \".*\"","title":"Teams"},{"location":"resources/teams/#teams","text":"Teams are an extension of kobs via the Team Custom Resource Definition . Teams can be used to define the ownership for resources and applications. You can access all teams via the Teams item on the home page of kobs.","title":"Teams"},{"location":"resources/teams/#specification","text":"In the following you can found the specification for the Team CRD. Field Type Description Required description string A description for the team. Yes logo string The logo for the team. Must be a path to an image file. Yes links []Link A list of links (e.g. a link to the teams Slack channel, Confluence page, etc.) No dashboards []Dashboard No","title":"Specification"},{"location":"resources/teams/#link","text":"Field Type Description Required title string Title for the link Yes link string The actuall link Yes","title":"Link"},{"location":"resources/teams/#dashboard","text":"Define the dashboards, which should be used for the team. Field Type Description Required cluster string Cluster of the dashboard. If this field is omitted kobs will look in the same cluster as the application was created in. No namespace string Namespace of the dashboard. If this field is omitted kobs will look in the same namespace as the application was created in. No name string Name of the dashboard. Yes title string Title for the dashboard Yes description string The description can be used to explain the content of the dashboard. No placeholders map A map of placeholders, whith the name as key and the value for the placeholder as value. More information for placeholders can be found in the documentation for Dashboards . No","title":"Dashboard"},{"location":"resources/teams/#example","text":"The following Team CR will add a new team called team-diablo . The team page will display all the applications from the bookinfo namespace and the resource usage of the Pods in this namespace. --- apiVersion : kobs.io/v1beta1 kind : Team metadata : name : team-diablo namespace : kobs spec : description : Productpage and Details logo : https://kobs.io/installation/assets/team-diablo.png links : - title : Website link : https://istio.io/latest/docs/examples/bookinfo/ - title : GitHub link : https://github.com/istio/istio/tree/master/samples/bookinfo dashboards : - name : resources namespace : kobs title : Resources in the bookinfo namespace placeholders : namespace : bookinfo - name : resource-usage namespace : kobs title : Resource Usage placeholders : namespace : bookinfo pod : \".*\"","title":"Example"}]}